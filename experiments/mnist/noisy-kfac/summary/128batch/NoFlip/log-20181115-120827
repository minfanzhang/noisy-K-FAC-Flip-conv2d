/h/minfanzh/noisy-K-FAC_use_all_FC/main.py
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import tensorflow as tf
import numpy as np
import os

from misc.utils import get_logger, get_args, makedirs
from misc.config import process_config
from misc.data_loader import load_pytorch
from core.model import Model
from core.train import Trainer


_INPUT_DIM = {
    'fmnist': [784],
    'mnist': [784],
    'cifar10': [32, 32, 3],
    'cifar100': [32, 32, 3]
}


def main():
    tf.set_random_seed(1231)
    np.random.seed(1231)

    try:
        args = get_args()
        config = process_config(args.config)
    except:
        print("Add a config file using \'--config file_name.json\'")
        exit(1)

    makedirs(config.summary_dir)
    makedirs(config.checkpoint_dir)

    # set logger
    path = os.path.dirname(os.path.abspath(__file__))
    path1 = os.path.join(path, 'core/model.py')
    path2 = os.path.join(path, 'core/train.py')
    logger = get_logger('log', logpath=config.summary_dir+'/',
                        filepath=os.path.abspath(__file__), package_files=[path1, path2])

    logger.info(config)

    # load data
    train_loader, test_loader = load_pytorch(config)

    # define computational graph
    sess = tf.Session()

    model_ = Model(config, _INPUT_DIM[config.dataset], len(train_loader.dataset))
    trainer = Trainer(sess, model_, train_loader, test_loader, config, logger)

    trainer.train()
    #trainer.check_grad()

if __name__ == "__main__":
    main()

/h/minfanzh/noisy-K-FAC_use_all_FC/core/model.py
import tensorflow as tf

from ops import optimizer as opt
from ops import layer_collection as lc
from ops import sampler as sp
from network.registry import get_model
from core.base_model import BaseModel


class Model(BaseModel):
    def __init__(self, config, input_dim, n_data):
        super().__init__(config)
        self.layer_collection = lc.LayerCollection()
        self.input_dim = input_dim
        self.n_data = n_data

        self.cov_update_op = None
        self.inv_update_op = None

        self.build_model()
        self.init_optim()
        self.init_saver()

    @property
    def trainable_variables(self):
        # note: we don't train the params of BN
        vars = []
        for var in tf.trainable_variables():
            if "w" in var.name:
                vars.append(var)
        return vars

    def build_model(self):
        self.inputs = tf.placeholder(tf.float32, [None] + self.input_dim)
        self.targets = tf.placeholder(tf.int64, [None])
        self.is_training = tf.placeholder(tf.bool)
        self.n_particles = tf.placeholder(tf.int32)

        inputs = self.inputs
        net = get_model(self.config.model_name)

        self.sampler = sp.Sampler(self.config, self.n_data, self.n_particles)
        logits, l2_loss = net(inputs, self.sampler, self.is_training,
                              self.config.batch_norm, self.layer_collection,
                              self.n_particles, self.config)

        # ensemble
        logits_ = tf.reduce_mean(
            tf.reshape(logits, [self.n_particles, -1, tf.shape(logits)[-1]]), 0)
        self.acc = tf.reduce_mean(tf.cast(tf.equal(
            self.targets, tf.argmax(logits_, axis=1)), dtype=tf.float32))

        targets_ = tf.tile(self.targets, [self.n_particles])
        self.loss = tf.reduce_mean(
            tf.nn.sparse_softmax_cross_entropy_with_logits(
                labels=targets_, logits=logits))

        coeff = self.config.kl / (self.n_data * self.config.eta)
        self.total_loss = self.loss + coeff * l2_loss

    def init_optim(self):
        self.optim = opt.KFACOptimizer(var_list=self.trainable_variables,
                                       learning_rate=self.config.learning_rate,
                                       cov_ema_decay=self.config.cov_ema_decay,
                                       damping=self.config.damping,
                                       layer_collection=self.layer_collection,
                                       norm_constraint=tf.train.exponential_decay(self.config.kl_clip,
                                                                                  self.global_step_tensor,
                                                                                  390, 0.95, staircase=True),
                                       momentum=self.config.momentum)

        self.cov_update_op = self.optim.cov_update_op
        self.inv_update_op = self.optim.inv_update_op

        with tf.control_dependencies([self.inv_update_op]):
            self.var_update_op = self.sampler.update(self.layer_collection.get_blocks())

        update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS)
        with tf.control_dependencies(update_ops):
            self.train_op = self.optim.minimize(self.total_loss, global_step=self.global_step_tensor)

    def init_saver(self):
        covs_lst = []
        for i in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES):
            if "u_c" in i.name or "v_c" in i.name :
                covs_lst.append(i)   # i.name if you want just a name
        var_lst = tf.trainable_variables() + covs_lst
        self.saver = tf.train.Saver(var_list=var_lst, max_to_keep=self.config.max_to_keep)


/h/minfanzh/noisy-K-FAC_use_all_FC/core/train.py
from core.base_train import BaseTrain
from tqdm import tqdm
import numpy as np

import os
import tensorflow as tf
import pickle as pickle

GRAD_CHECK_ROOT_DIR = './grad_checks_FC_KFAC'


class Trainer(BaseTrain):
    def __init__(self, sess, model, train_loader, test_loader, config, logger):
        super(Trainer, self).__init__(sess, model, config, logger)
        self.train_loader = train_loader
        self.test_loader = test_loader

        self.checkpoint_dir = './checkpoint_KFAC_FC_flip'
        self.model_name = 'model'

    def train(self):
        if self.config.reload_step > 0 :
            print('---->reloading ', self.config.reload_step)
            self.reload(self.config.reload_step, self.sess, self.model.saver)

        for cur_epoch in range(self.config.epoch):
            self.logger.info('epoch: {}'.format(int(cur_epoch)))
            self.train_epoch(cur_epoch)
            self.test_epoch()

    def train_epoch(self, cur_epoch):
        loss_list = []
        acc_list = []
        for itr, (x, y) in enumerate(tqdm(self.train_loader)):
            feed_dict = {
                self.model.inputs: x,
                self.model.targets: y,
                self.model.n_particles: self.config.train_particles
            }
            '''if itr % 20 == 0:
                acc_test_list = []
                for (x1, y1) in self.test_loader:
                    feed_dict_test = {
                        self.model.inputs: x1,
                        self.model.targets: y1,
                        self.model.is_training: False,
                        self.model.n_particles: self.config.test_particles
                    }
                    acc_test = self.sess.run([self.model.acc], feed_dict=feed_dict_test)

                    acc_test_list.append(acc_test)                

                avg_test_acc = np.mean(acc_test_list)
                self.logger.info("itr %d : test accuracy: %5.4f\n"%(itr, float(avg_test_acc)))'''

            feed_dict.update({self.model.is_training: True})
            self.sess.run([self.model.train_op], feed_dict=feed_dict)

            feed_dict.update({self.model.is_training: False})  # note: that's important
            loss, acc = self.sess.run([self.model.loss, self.model.acc], feed_dict=feed_dict)
            loss_list.append(loss)
            acc_list.append(acc)

            cur_iter = self.model.global_step_tensor.eval(self.sess)
            if cur_iter % self.config.TCov == 0:
                self.sess.run([self.model.cov_update_op], feed_dict=feed_dict)

            if cur_iter % self.config.TInv == 0:
                self.sess.run([self.model.inv_update_op, self.model.var_update_op], feed_dict=feed_dict)
        
        '''covs_lst = []
        for i in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES):
            if "u_c" in i.name or "v_c" in i.name :
                covs_lst.append(i)   # i.name if you want just a name'''

        print('---->saving ', cur_epoch+self.config.reload_step)
        checkpoint_path = os.path.join(self.checkpoint_dir, self.model_name)
        self.model.saver.save(self.sess, checkpoint_path, global_step=cur_epoch+self.config.reload_step)        

        avg_loss = np.mean(loss_list)
        avg_acc = np.mean(acc_list)
        self.logger.info("train | loss: %5.4f | accuracy: %5.4f"%(float(avg_loss), float(avg_acc)))

        # summarize
        summaries_dict = dict()
        summaries_dict['train_loss'] = avg_loss
        summaries_dict['train_acc'] = avg_acc

        # summarize
        cur_iter = self.model.global_step_tensor.eval(self.sess)
        self.summarizer.summarize(cur_iter, summaries_dict=summaries_dict)

        # self.model.save(self.sess)

    def test_epoch(self):
        loss_list = []
        acc_list = []
        for (x, y) in self.test_loader:
            feed_dict = {
                self.model.inputs: x,
                self.model.targets: y,
                self.model.is_training: False,
                self.model.n_particles: self.config.test_particles
            }
            loss, acc = self.sess.run([self.model.loss, self.model.acc], feed_dict=feed_dict)
            loss_list.append(loss)
            acc_list.append(acc)

        avg_loss = np.mean(loss_list)
        avg_acc = np.mean(acc_list)
        self.logger.info("test | loss: %5.4f | accuracy: %5.4f\n"%(float(avg_loss), float(avg_acc)))

        # summarize
        summaries_dict = dict()
        summaries_dict['test_loss'] = avg_loss
        summaries_dict['test_acc'] = avg_acc

        # summarize
        cur_iter = self.model.global_step_tensor.eval(self.sess)
        self.summarizer.summarize(cur_iter, summaries_dict=summaries_dict)

    def check_grad(self):
        if self.config.reload_step > 0 :
            print('---->reloading ', self.config.reload_step)
            self.reload(self.config.reload_step, self.sess, self.model.saver)
         
        (x, y) = next(iter(self.train_loader))

        num_samples = 500
        num_trials = 10

        opt = self.model.optim
        
        trainable_vars = tf.trainable_variables()
        gradient_step = opt.compute_gradients(self.model.total_loss, trainable_vars)

        feed_dict = {self.model.inputs: x, self.model.targets: y, self.model.is_training: True, 
                     self.model.n_particles: self.config.train_particles}

        W1_shape = [784, 512]
        W2_shape = [512, 512]
        W3_shape = [512, 512]
        W4_shape = [512, 512]
        W5_shape = [512, 10]

        W1_grad_var = np.zeros([num_trials])
        W2_grad_var = np.zeros([num_trials])
        W3_grad_var = np.zeros([num_trials])
        W4_grad_var = np.zeros([num_trials])
        W5_grad_var = np.zeros([num_trials])


        for i in range(num_trials) :
            print('Iter {}/{}'.format(i, num_trials))
            W1_grad_lst = np.zeros([num_samples,W1_shape[0],W1_shape[1]])
            W2_grad_lst = np.zeros([num_samples,W2_shape[0],W2_shape[1]])
            W3_grad_lst = np.zeros([num_samples,W3_shape[0],W3_shape[1]])
            W4_grad_lst = np.zeros([num_samples,W4_shape[0],W4_shape[1]])
            W5_grad_lst = np.zeros([num_samples,W5_shape[0],W5_shape[1]])

            for j in range(num_samples) :
                grad_W = self.sess.run(gradient_step, feed_dict=feed_dict)
                W1_grad_lst[j,:,:] = grad_W[0][0]
                W2_grad_lst[j,:,:] = grad_W[2][0]
                W3_grad_lst[j,:,:] = grad_W[4][0]
                W4_grad_lst[j,:,:] = grad_W[6][0]
                W5_grad_lst[j,:,:] = grad_W[8][0]

            W1_grad_var[i] = np.mean(np.var(W1_grad_lst, axis=0))
            W2_grad_var[i] = np.mean(np.var(W2_grad_lst, axis=0))
            W3_grad_var[i] = np.mean(np.var(W3_grad_lst, axis=0))
            W4_grad_var[i] = np.mean(np.var(W4_grad_lst, axis=0))
            W5_grad_var[i] = np.mean(np.var(W5_grad_lst, axis=0))

        print("Batch size: ",str(self.config.batch_size)," With flip: ",str(self.config.use_flip),", W1 gradients has variance: \n",W1_grad_var)
        print("Batch size: ",str(self.config.batch_size)," With flip: ",str(self.config.use_flip),", W2 gradients has variance: \n",W2_grad_var)
        print("Batch size: ",str(self.config.batch_size)," With flip: ",str(self.config.use_flip),", W3 gradients has variance: \n",W3_grad_var)
        print("Batch size: ",str(self.config.batch_size)," With flip: ",str(self.config.use_flip),", W4 gradients has variance: \n",W4_grad_var)
        print("Batch size: ",str(self.config.batch_size)," With flip: ",str(self.config.use_flip),", W5 gradients has variance: \n",W5_grad_var)


        grad_save_path = '{}/batch{}'.format(GRAD_CHECK_ROOT_DIR, self.config.batch_size)
        if not os.path.exists(grad_save_path):
            os.makedirs(grad_save_path)

        if self.config.use_flip :
            with open('{}/ptb_var_87_train_acc_flip.pkl'.format(grad_save_path), 'wb') as f2:
                pickle.dump([W1_grad_var, W2_grad_var, W3_grad_var, W4_grad_var], f2)
                print('======================save_flip_model_batch_size_{}========================='.format(self.config.batch_size))
        else :
            with open('{}/ptb_var_87_train_acc_pert.pkl'.format(grad_save_path), 'wb') as f1:
                pickle.dump([W1_grad_var, W2_grad_var, W3_grad_var, W4_grad_var], f1)
                print('======================save_pert_model_batch_size_{}========================='.format(self.config.batch_size))


    def reload(self, step, sess, saver) :
        checkpoint_path = os.path.join(self.checkpoint_dir, self.model_name)
        model_path = checkpoint_path+'-'+str(step)
        if not os.path.exists(model_path+'.meta') :
            print('------- no such checkpoint', model_path)
            return
        print('---->restoring ', step)
        saver.restore(sess, model_path)
TCov: 10
TInv: 200
batch_norm: false
batch_size: 128
checkpoint_dir: ./experiments/mnist/noisy-kfac/checkpoint/
cov_ema_decay: 0.99
damping: 0.001
data_aug: true
data_path: ./data
dataset: mnist
epoch: 180
eta: 0.1
exp_name: noisy-kfac
fisher_approx: kron
fix_batch: false
kl: 0.2
kl_clip: 0.001
learning_rate: 0.0001
max_to_keep: 0
model_name: vgg16
momentum: 0.9
num_workers: 2
optimizer: kfac
reload_step: 1
summary_dir: ./experiments/mnist/noisy-kfac/summary/128batch/NoFlip/
test_batch_size: 100
test_particles: 1
train_particles: 1
use_flip: false

epoch: 0
train | loss: 2.0089 | accuracy: 0.7184
test | loss: 1.8905 | accuracy: 0.8315

epoch: 1
train | loss: 1.7243 | accuracy: 0.8369
test | loss: 1.4770 | accuracy: 0.8514

epoch: 2
train | loss: 1.1582 | accuracy: 0.8466
test | loss: 0.8064 | accuracy: 0.8700

epoch: 3
train | loss: 0.6068 | accuracy: 0.8827
test | loss: 0.4248 | accuracy: 0.9047

epoch: 4
train | loss: 0.3667 | accuracy: 0.9090
test | loss: 0.2913 | accuracy: 0.9230

epoch: 5
train | loss: 0.2687 | accuracy: 0.9276
test | loss: 0.2304 | accuracy: 0.9369

epoch: 6
train | loss: 0.2135 | accuracy: 0.9418
test | loss: 0.1905 | accuracy: 0.9449

epoch: 7
train | loss: 0.1759 | accuracy: 0.9510
test | loss: 0.1669 | accuracy: 0.9519

epoch: 8
train | loss: 0.1564 | accuracy: 0.9567
test | loss: 0.1629 | accuracy: 0.9527

epoch: 9
train | loss: 0.1467 | accuracy: 0.9571
test | loss: 0.1532 | accuracy: 0.9536

epoch: 10
train | loss: 0.1353 | accuracy: 0.9596
test | loss: 0.1485 | accuracy: 0.9531

epoch: 11
train | loss: 0.1275 | accuracy: 0.9605
test | loss: 0.1482 | accuracy: 0.9552

epoch: 12
train | loss: 0.1213 | accuracy: 0.9621
test | loss: 0.1553 | accuracy: 0.9553

epoch: 13
train | loss: 0.1114 | accuracy: 0.9647
test | loss: 0.1415 | accuracy: 0.9569

epoch: 14
train | loss: 0.1124 | accuracy: 0.9648
test | loss: 0.1476 | accuracy: 0.9565

epoch: 15
train | loss: 0.1045 | accuracy: 0.9674
test | loss: 0.1579 | accuracy: 0.9539

epoch: 16
train | loss: 0.1021 | accuracy: 0.9684
test | loss: 0.1545 | accuracy: 0.9587

epoch: 17
train | loss: 0.0979 | accuracy: 0.9700
test | loss: 0.1535 | accuracy: 0.9592

epoch: 18
train | loss: 0.0968 | accuracy: 0.9706
test | loss: 0.1616 | accuracy: 0.9597

epoch: 19
train | loss: 0.0953 | accuracy: 0.9710
test | loss: 0.1791 | accuracy: 0.9550

epoch: 20
train | loss: 0.0939 | accuracy: 0.9725
test | loss: 0.1680 | accuracy: 0.9580

epoch: 21
train | loss: 0.0908 | accuracy: 0.9739
test | loss: 0.1662 | accuracy: 0.9607

epoch: 22
train | loss: 0.0914 | accuracy: 0.9753
test | loss: 0.1799 | accuracy: 0.9627

epoch: 23
train | loss: 0.0885 | accuracy: 0.9762
test | loss: 0.1891 | accuracy: 0.9597

epoch: 24
train | loss: 0.0969 | accuracy: 0.9750
test | loss: 0.2081 | accuracy: 0.9603

epoch: 25
train | loss: 0.0970 | accuracy: 0.9762
test | loss: 0.2259 | accuracy: 0.9611

epoch: 26
train | loss: 0.0901 | accuracy: 0.9781
test | loss: 0.2405 | accuracy: 0.9613

epoch: 27
train | loss: 0.0873 | accuracy: 0.9795
test | loss: 0.2218 | accuracy: 0.9632

epoch: 28
train | loss: 0.0870 | accuracy: 0.9808
test | loss: 0.2550 | accuracy: 0.9655

epoch: 29
train | loss: 0.0812 | accuracy: 0.9823
test | loss: 0.2395 | accuracy: 0.9650

epoch: 30
train | loss: 0.0878 | accuracy: 0.9815
test | loss: 0.2901 | accuracy: 0.9635

epoch: 31
train | loss: 0.1010 | accuracy: 0.9800
test | loss: 0.3063 | accuracy: 0.9619

epoch: 32
train | loss: 0.1179 | accuracy: 0.9797
test | loss: 0.3360 | accuracy: 0.9609

epoch: 33
train | loss: 0.1156 | accuracy: 0.9802
test | loss: 0.3094 | accuracy: 0.9661

epoch: 34
train | loss: 0.0945 | accuracy: 0.9846
test | loss: 0.3430 | accuracy: 0.9638

epoch: 35
train | loss: 0.1048 | accuracy: 0.9841
test | loss: 0.3576 | accuracy: 0.9644

epoch: 36
train | loss: 0.1182 | accuracy: 0.9830
test | loss: 0.4455 | accuracy: 0.9621

epoch: 37
train | loss: 0.1181 | accuracy: 0.9835
test | loss: 0.4072 | accuracy: 0.9662

epoch: 38
train | loss: 0.1077 | accuracy: 0.9851
test | loss: 0.4053 | accuracy: 0.9661

epoch: 39
train | loss: 0.1171 | accuracy: 0.9848
test | loss: 0.4759 | accuracy: 0.9638

epoch: 40
train | loss: 0.1283 | accuracy: 0.9848
test | loss: 0.5991 | accuracy: 0.9622

epoch: 41
train | loss: 0.1396 | accuracy: 0.9846
test | loss: 0.6006 | accuracy: 0.9640

epoch: 42
train | loss: 0.1437 | accuracy: 0.9851
test | loss: 0.6052 | accuracy: 0.9643

epoch: 43
train | loss: 0.1302 | accuracy: 0.9863
test | loss: 0.6609 | accuracy: 0.9620

epoch: 44
train | loss: 0.1585 | accuracy: 0.9853
test | loss: 0.6439 | accuracy: 0.9669

epoch: 45
train | loss: 0.1610 | accuracy: 0.9860
test | loss: 0.7269 | accuracy: 0.9633

epoch: 46
train | loss: 0.1464 | accuracy: 0.9873
test | loss: 0.7105 | accuracy: 0.9673

epoch: 47
train | loss: 0.1691 | accuracy: 0.9873
test | loss: 0.8170 | accuracy: 0.9660

epoch: 48
train | loss: 0.1448 | accuracy: 0.9885
test | loss: 0.7874 | accuracy: 0.9680

epoch: 49
train | loss: 0.1619 | accuracy: 0.9878
test | loss: 0.9694 | accuracy: 0.9661

epoch: 50
train | loss: 0.1642 | accuracy: 0.9887
test | loss: 0.9255 | accuracy: 0.9673

epoch: 51
train | loss: 0.1608 | accuracy: 0.9892
test | loss: 0.9601 | accuracy: 0.9707

epoch: 52
train | loss: 0.1387 | accuracy: 0.9909
test | loss: 0.9365 | accuracy: 0.9709

epoch: 53
train | loss: 0.1435 | accuracy: 0.9911
test | loss: 1.0479 | accuracy: 0.9657

epoch: 54
train | loss: 0.1560 | accuracy: 0.9907
test | loss: 1.0815 | accuracy: 0.9689

epoch: 55
train | loss: 0.1264 | accuracy: 0.9923
test | loss: 1.0279 | accuracy: 0.9711

epoch: 56
train | loss: 0.1577 | accuracy: 0.9913
test | loss: 1.0303 | accuracy: 0.9700

epoch: 57
train | loss: 0.1301 | accuracy: 0.9924
test | loss: 1.1064 | accuracy: 0.9694

epoch: 58
train | loss: 0.1520 | accuracy: 0.9917
test | loss: 1.2368 | accuracy: 0.9693

epoch: 59
train | loss: 0.1665 | accuracy: 0.9917
test | loss: 1.1742 | accuracy: 0.9701

epoch: 60
train | loss: 0.1246 | accuracy: 0.9932
test | loss: 1.2671 | accuracy: 0.9686

epoch: 61
train | loss: 0.1392 | accuracy: 0.9929
test | loss: 1.1950 | accuracy: 0.9709

epoch: 62
train | loss: 0.1434 | accuracy: 0.9931
test | loss: 1.3384 | accuracy: 0.9721

epoch: 63
train | loss: 0.1279 | accuracy: 0.9936
test | loss: 1.2785 | accuracy: 0.9698

epoch: 64
train | loss: 0.1419 | accuracy: 0.9933
test | loss: 1.2903 | accuracy: 0.9726

epoch: 65
train | loss: 0.1519 | accuracy: 0.9933
test | loss: 1.4308 | accuracy: 0.9699

epoch: 66
train | loss: 0.1863 | accuracy: 0.9926
test | loss: 1.4749 | accuracy: 0.9698

epoch: 67
train | loss: 0.0968 | accuracy: 0.9955
test | loss: 1.4143 | accuracy: 0.9740

epoch: 68
train | loss: 0.0969 | accuracy: 0.9958
test | loss: 1.4544 | accuracy: 0.9728

epoch: 69
train | loss: 0.0863 | accuracy: 0.9957
test | loss: 1.4058 | accuracy: 0.9732

epoch: 70
train | loss: 0.1321 | accuracy: 0.9945
test | loss: 1.4935 | accuracy: 0.9717

epoch: 71
train | loss: 0.1289 | accuracy: 0.9945
test | loss: 1.4179 | accuracy: 0.9736

epoch: 72
train | loss: 0.0799 | accuracy: 0.9964
test | loss: 1.5667 | accuracy: 0.9727

epoch: 73
train | loss: 0.0970 | accuracy: 0.9959
test | loss: 1.4655 | accuracy: 0.9746

epoch: 74
train | loss: 0.0991 | accuracy: 0.9956
test | loss: 1.5158 | accuracy: 0.9724

epoch: 75
train | loss: 0.1394 | accuracy: 0.9950
test | loss: 1.4539 | accuracy: 0.9726

epoch: 76
train | loss: 0.1261 | accuracy: 0.9950
test | loss: 1.6003 | accuracy: 0.9713

epoch: 77
train | loss: 0.1562 | accuracy: 0.9946
test | loss: 1.5593 | accuracy: 0.9721

epoch: 78
train | loss: 0.1518 | accuracy: 0.9947
test | loss: 1.6412 | accuracy: 0.9734

epoch: 79
train | loss: 0.1343 | accuracy: 0.9954
test | loss: 1.6710 | accuracy: 0.9723

epoch: 80
train | loss: 0.1479 | accuracy: 0.9948
test | loss: 1.7155 | accuracy: 0.9732

epoch: 81
train | loss: 0.1188 | accuracy: 0.9959
test | loss: 1.7792 | accuracy: 0.9720

epoch: 82
train | loss: 0.1301 | accuracy: 0.9955
test | loss: 1.9247 | accuracy: 0.9733

epoch: 83
train | loss: 0.1090 | accuracy: 0.9964
test | loss: 1.8172 | accuracy: 0.9747

epoch: 84
train | loss: 0.1191 | accuracy: 0.9954
test | loss: 1.9354 | accuracy: 0.9706

epoch: 85
train | loss: 0.1189 | accuracy: 0.9962
test | loss: 1.6932 | accuracy: 0.9765

epoch: 86
train | loss: 0.0822 | accuracy: 0.9971
test | loss: 1.8320 | accuracy: 0.9748

epoch: 87
train | loss: 0.1613 | accuracy: 0.9951
test | loss: 1.7511 | accuracy: 0.9763

epoch: 88
train | loss: 0.0715 | accuracy: 0.9976
test | loss: 1.6277 | accuracy: 0.9776

epoch: 89
train | loss: 0.0994 | accuracy: 0.9968
test | loss: 1.6990 | accuracy: 0.9769

epoch: 90
train | loss: 0.0498 | accuracy: 0.9981
test | loss: 1.6889 | accuracy: 0.9764

epoch: 91
train | loss: 0.0664 | accuracy: 0.9977
test | loss: 1.7282 | accuracy: 0.9758

epoch: 92
train | loss: 0.0739 | accuracy: 0.9974
test | loss: 1.7094 | accuracy: 0.9762

epoch: 93
train | loss: 0.1185 | accuracy: 0.9963
test | loss: 1.6387 | accuracy: 0.9742

epoch: 94
train | loss: 0.0627 | accuracy: 0.9975
test | loss: 1.7819 | accuracy: 0.9750

epoch: 95
train | loss: 0.0962 | accuracy: 0.9968
test | loss: 1.6886 | accuracy: 0.9737

epoch: 96
train | loss: 0.1118 | accuracy: 0.9958
test | loss: 1.7924 | accuracy: 0.9750

epoch: 97
train | loss: 0.1104 | accuracy: 0.9961
test | loss: 1.9126 | accuracy: 0.9733

epoch: 98
train | loss: 0.1436 | accuracy: 0.9953
test | loss: 2.0139 | accuracy: 0.9738

epoch: 99
train | loss: 0.0938 | accuracy: 0.9968
test | loss: 1.6727 | accuracy: 0.9771

epoch: 100
train | loss: 0.0630 | accuracy: 0.9977
test | loss: 1.7563 | accuracy: 0.9763

epoch: 101
train | loss: 0.0984 | accuracy: 0.9965
test | loss: 1.6517 | accuracy: 0.9752

epoch: 102
train | loss: 0.1785 | accuracy: 0.9945
test | loss: 1.8531 | accuracy: 0.9723

epoch: 103
train | loss: 0.0713 | accuracy: 0.9973
test | loss: 1.6559 | accuracy: 0.9783

epoch: 104
train | loss: 0.0908 | accuracy: 0.9966
test | loss: 1.7226 | accuracy: 0.9780

epoch: 105
train | loss: 0.0628 | accuracy: 0.9977
test | loss: 1.7568 | accuracy: 0.9756

epoch: 106
train | loss: 0.0863 | accuracy: 0.9970
test | loss: 1.7989 | accuracy: 0.9761

epoch: 107
train | loss: 0.1342 | accuracy: 0.9953
test | loss: 1.7681 | accuracy: 0.9735

epoch: 108
train | loss: 0.1172 | accuracy: 0.9961
test | loss: 1.8804 | accuracy: 0.9760

epoch: 109
train | loss: 0.1143 | accuracy: 0.9961
test | loss: 1.8345 | accuracy: 0.9744

epoch: 110
train | loss: 0.0826 | accuracy: 0.9972
test | loss: 1.8627 | accuracy: 0.9751

epoch: 111
train | loss: 0.1116 | accuracy: 0.9964
test | loss: 1.8007 | accuracy: 0.9766

epoch: 112
train | loss: 0.1208 | accuracy: 0.9962
test | loss: 1.7628 | accuracy: 0.9750

epoch: 113
train | loss: 0.0857 | accuracy: 0.9971
test | loss: 1.7869 | accuracy: 0.9771

epoch: 114
train | loss: 0.0882 | accuracy: 0.9968
test | loss: 1.7626 | accuracy: 0.9763

epoch: 115
train | loss: 0.1267 | accuracy: 0.9959
test | loss: 1.8551 | accuracy: 0.9753

epoch: 116
train | loss: 0.1044 | accuracy: 0.9964
test | loss: 1.7174 | accuracy: 0.9776

epoch: 117
train | loss: 0.0620 | accuracy: 0.9979
test | loss: 1.7241 | accuracy: 0.9767

epoch: 118
train | loss: 0.0660 | accuracy: 0.9978
test | loss: 1.6979 | accuracy: 0.9755

epoch: 119
train | loss: 0.0634 | accuracy: 0.9978
test | loss: 1.7607 | accuracy: 0.9771

epoch: 120
train | loss: 0.0896 | accuracy: 0.9975
test | loss: 1.7635 | accuracy: 0.9774

epoch: 121
train | loss: 0.1497 | accuracy: 0.9957
test | loss: 1.9020 | accuracy: 0.9747

epoch: 122
train | loss: 0.2037 | accuracy: 0.9941
test | loss: 1.7198 | accuracy: 0.9774

epoch: 123
train | loss: 0.1136 | accuracy: 0.9961
test | loss: 1.9245 | accuracy: 0.9754

epoch: 124
train | loss: 0.1876 | accuracy: 0.9944
test | loss: 1.8681 | accuracy: 0.9734

epoch: 125
train | loss: 0.1424 | accuracy: 0.9956
test | loss: 1.8978 | accuracy: 0.9754

epoch: 126
train | loss: 0.2243 | accuracy: 0.9933
test | loss: 2.0853 | accuracy: 0.9709

epoch: 127
train | loss: 0.1737 | accuracy: 0.9949
test | loss: 1.5715 | accuracy: 0.9773

epoch: 128
train | loss: 0.0703 | accuracy: 0.9975
test | loss: 1.6882 | accuracy: 0.9764

epoch: 129
train | loss: 0.0793 | accuracy: 0.9974
test | loss: 1.6604 | accuracy: 0.9777

epoch: 130
train | loss: 0.1082 | accuracy: 0.9963
test | loss: 1.6302 | accuracy: 0.9768

epoch: 131
train | loss: 0.0956 | accuracy: 0.9965
test | loss: 1.6629 | accuracy: 0.9757

epoch: 132
train | loss: 0.1312 | accuracy: 0.9955
test | loss: 1.7655 | accuracy: 0.9732

epoch: 133
train | loss: 0.1096 | accuracy: 0.9957
test | loss: 1.6259 | accuracy: 0.9771

epoch: 134
train | loss: 0.1052 | accuracy: 0.9963
test | loss: 1.8006 | accuracy: 0.9753

epoch: 135
train | loss: 0.1223 | accuracy: 0.9959
test | loss: 1.6953 | accuracy: 0.9758

epoch: 136
train | loss: 0.1291 | accuracy: 0.9955
test | loss: 1.6886 | accuracy: 0.9752

epoch: 137
train | loss: 0.0859 | accuracy: 0.9968
test | loss: 1.5400 | accuracy: 0.9785

epoch: 138
train | loss: 0.0814 | accuracy: 0.9970
test | loss: 1.5779 | accuracy: 0.9766

epoch: 139
train | loss: 0.0970 | accuracy: 0.9968
test | loss: 1.5906 | accuracy: 0.9770

epoch: 140
train | loss: 0.1013 | accuracy: 0.9970
test | loss: 1.4665 | accuracy: 0.9773

epoch: 141
train | loss: 0.1101 | accuracy: 0.9962
test | loss: 1.6995 | accuracy: 0.9748

epoch: 142
train | loss: 0.1430 | accuracy: 0.9951
test | loss: 1.7333 | accuracy: 0.9742

epoch: 143
train | loss: 0.1599 | accuracy: 0.9950
test | loss: 1.6370 | accuracy: 0.9764

epoch: 144
train | loss: 0.1146 | accuracy: 0.9957
test | loss: 1.4880 | accuracy: 0.9791

epoch: 145
train | loss: 0.0754 | accuracy: 0.9972
test | loss: 1.5894 | accuracy: 0.9773

epoch: 146
train | loss: 0.0863 | accuracy: 0.9966
test | loss: 1.6103 | accuracy: 0.9768

epoch: 147
train | loss: 0.0981 | accuracy: 0.9965
test | loss: 1.4626 | accuracy: 0.9801

epoch: 148
train | loss: 0.0434 | accuracy: 0.9984
test | loss: 1.3464 | accuracy: 0.9792

epoch: 149
train | loss: 0.0560 | accuracy: 0.9979
test | loss: 1.3687 | accuracy: 0.9805

epoch: 150
train | loss: 0.0627 | accuracy: 0.9977
test | loss: 1.3320 | accuracy: 0.9782

epoch: 151
train | loss: 0.0976 | accuracy: 0.9963
test | loss: 1.5638 | accuracy: 0.9761

epoch: 152
train | loss: 0.1420 | accuracy: 0.9953
test | loss: 1.6998 | accuracy: 0.9762

epoch: 153
train | loss: 0.1115 | accuracy: 0.9959
test | loss: 1.5219 | accuracy: 0.9775

epoch: 154
train | loss: 0.0997 | accuracy: 0.9963
test | loss: 1.3473 | accuracy: 0.9796

epoch: 155
train | loss: 0.0647 | accuracy: 0.9975
test | loss: 1.4196 | accuracy: 0.9787

epoch: 156
train | loss: 0.0816 | accuracy: 0.9968
test | loss: 1.5264 | accuracy: 0.9769

epoch: 157
train | loss: 0.0698 | accuracy: 0.9969
test | loss: 1.5019 | accuracy: 0.9780

epoch: 158
train | loss: 0.1204 | accuracy: 0.9961
test | loss: 1.4724 | accuracy: 0.9772

epoch: 159
train | loss: 0.0952 | accuracy: 0.9964
test | loss: 1.4071 | accuracy: 0.9781

epoch: 160
train | loss: 0.1047 | accuracy: 0.9962
test | loss: 1.3325 | accuracy: 0.9779

epoch: 161
train | loss: 0.1137 | accuracy: 0.9959
test | loss: 1.4397 | accuracy: 0.9760

epoch: 162
train | loss: 0.1003 | accuracy: 0.9961
test | loss: 1.5143 | accuracy: 0.9766

epoch: 163
train | loss: 0.0650 | accuracy: 0.9974
test | loss: 1.3701 | accuracy: 0.9797

epoch: 164
train | loss: 0.0620 | accuracy: 0.9975
test | loss: 1.2826 | accuracy: 0.9808

epoch: 165
train | loss: 0.0693 | accuracy: 0.9974
test | loss: 1.3335 | accuracy: 0.9789

epoch: 166
train | loss: 0.0477 | accuracy: 0.9976
test | loss: 1.2173 | accuracy: 0.9816

epoch: 167
train | loss: 0.0638 | accuracy: 0.9975
test | loss: 1.4390 | accuracy: 0.9799

epoch: 168
train | loss: 0.0615 | accuracy: 0.9974
test | loss: 1.3596 | accuracy: 0.9784

epoch: 169
train | loss: 0.0703 | accuracy: 0.9969
test | loss: 1.4251 | accuracy: 0.9759

epoch: 170
train | loss: 0.1029 | accuracy: 0.9959
test | loss: 1.5747 | accuracy: 0.9758

epoch: 171
train | loss: 0.0727 | accuracy: 0.9970
test | loss: 1.2972 | accuracy: 0.9807

epoch: 172
train | loss: 0.0744 | accuracy: 0.9971
test | loss: 1.2841 | accuracy: 0.9786

epoch: 173
train | loss: 0.0800 | accuracy: 0.9967
test | loss: 1.3016 | accuracy: 0.9792

epoch: 174
train | loss: 0.1432 | accuracy: 0.9945
test | loss: 1.5156 | accuracy: 0.9744

epoch: 175
train | loss: 0.1343 | accuracy: 0.9950
test | loss: 1.4138 | accuracy: 0.9757

epoch: 176
train | loss: 0.1446 | accuracy: 0.9946
test | loss: 1.4795 | accuracy: 0.9769

epoch: 177
train | loss: 0.0993 | accuracy: 0.9959
test | loss: 1.4072 | accuracy: 0.9781

epoch: 178
train | loss: 0.1525 | accuracy: 0.9948
test | loss: 1.3885 | accuracy: 0.9762

epoch: 179
train | loss: 0.0736 | accuracy: 0.9968
test | loss: 1.2407 | accuracy: 0.9797

