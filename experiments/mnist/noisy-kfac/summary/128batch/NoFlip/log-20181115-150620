/h/minfanzh/noisy-K-FAC_use_all_FC/main.py
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import tensorflow as tf
import numpy as np
import os

from misc.utils import get_logger, get_args, makedirs
from misc.config import process_config
from misc.data_loader import load_pytorch
from core.model import Model
from core.train import Trainer


_INPUT_DIM = {
    'fmnist': [784],
    'mnist': [784],
    'cifar10': [32, 32, 3],
    'cifar100': [32, 32, 3]
}


def main():
    tf.set_random_seed(1231)
    np.random.seed(1231)

    try:
        args = get_args()
        config = process_config(args.config)
    except:
        print("Add a config file using \'--config file_name.json\'")
        exit(1)

    makedirs(config.summary_dir)
    makedirs(config.checkpoint_dir)

    # set logger
    path = os.path.dirname(os.path.abspath(__file__))
    path1 = os.path.join(path, 'core/model.py')
    path2 = os.path.join(path, 'core/train.py')
    logger = get_logger('log', logpath=config.summary_dir+'/',
                        filepath=os.path.abspath(__file__), package_files=[path1, path2])

    logger.info(config)

    # load data
    train_loader, test_loader = load_pytorch(config)

    # define computational graph
    sess = tf.Session()

    model_ = Model(config, _INPUT_DIM[config.dataset], len(train_loader.dataset))
    trainer = Trainer(sess, model_, train_loader, test_loader, config, logger)

    trainer.train()
    #trainer.check_grad()

if __name__ == "__main__":
    main()

/h/minfanzh/noisy-K-FAC_use_all_FC/core/model.py
import tensorflow as tf

from ops import optimizer as opt
from ops import layer_collection as lc
from ops import sampler as sp
from network.registry import get_model
from core.base_model import BaseModel


class Model(BaseModel):
    def __init__(self, config, input_dim, n_data):
        super().__init__(config)
        self.layer_collection = lc.LayerCollection()
        self.input_dim = input_dim
        self.n_data = n_data

        self.cov_update_op = None
        self.inv_update_op = None

        self.build_model()
        self.init_optim()
        self.init_saver()

    @property
    def trainable_variables(self):
        # note: we don't train the params of BN
        vars = []
        for var in tf.trainable_variables():
            if "w" in var.name:
                vars.append(var)
        return vars

    def build_model(self):
        self.inputs = tf.placeholder(tf.float32, [None] + self.input_dim)
        self.targets = tf.placeholder(tf.int64, [None])
        self.is_training = tf.placeholder(tf.bool)
        self.n_particles = tf.placeholder(tf.int32)

        inputs = self.inputs
        net = get_model(self.config.model_name)

        self.sampler = sp.Sampler(self.config, self.n_data, self.n_particles)
        logits, l2_loss = net(inputs, self.sampler, self.is_training,
                              self.config.batch_norm, self.layer_collection,
                              self.n_particles, self.config)

        # ensemble
        logits_ = tf.reduce_mean(
            tf.reshape(logits, [self.n_particles, -1, tf.shape(logits)[-1]]), 0)
        self.acc = tf.reduce_mean(tf.cast(tf.equal(
            self.targets, tf.argmax(logits_, axis=1)), dtype=tf.float32))

        targets_ = tf.tile(self.targets, [self.n_particles])
        self.loss = tf.reduce_mean(
            tf.nn.sparse_softmax_cross_entropy_with_logits(
                labels=targets_, logits=logits))

        coeff = self.config.kl / (self.n_data * self.config.eta)
        self.total_loss = self.loss + coeff * l2_loss

    def init_optim(self):
        self.optim = opt.KFACOptimizer(var_list=self.trainable_variables,
                                       learning_rate=self.config.learning_rate,
                                       cov_ema_decay=self.config.cov_ema_decay,
                                       damping=self.config.damping,
                                       layer_collection=self.layer_collection,
                                       norm_constraint=tf.train.exponential_decay(self.config.kl_clip,
                                                                                  self.global_step_tensor,
                                                                                  390, 0.95, staircase=True),
                                       momentum=self.config.momentum)

        self.cov_update_op = self.optim.cov_update_op
        self.inv_update_op = self.optim.inv_update_op

        with tf.control_dependencies([self.inv_update_op]):
            self.var_update_op = self.sampler.update(self.layer_collection.get_blocks())

        update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS)
        with tf.control_dependencies(update_ops):
            self.train_op = self.optim.minimize(self.total_loss, global_step=self.global_step_tensor)

    def init_saver(self):
        covs_lst = []
        for i in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES):
            if "u_c" in i.name or "v_c" in i.name :
                covs_lst.append(i)   # i.name if you want just a name
        var_lst = tf.trainable_variables() + covs_lst
        self.saver = tf.train.Saver(var_list=var_lst, max_to_keep=self.config.max_to_keep)


/h/minfanzh/noisy-K-FAC_use_all_FC/core/train.py
from core.base_train import BaseTrain
from tqdm import tqdm
import numpy as np

import os
import tensorflow as tf
import pickle as pickle

GRAD_CHECK_ROOT_DIR = './grad_checks_FC_KFAC'


class Trainer(BaseTrain):
    def __init__(self, sess, model, train_loader, test_loader, config, logger):
        super(Trainer, self).__init__(sess, model, config, logger)
        self.train_loader = train_loader
        self.test_loader = test_loader

        self.checkpoint_dir = './checkpoint_KFAC_FC_flip'
        self.model_name = 'model'

    def train(self):
        if self.config.reload_step > 0 :
            print('---->reloading ', self.config.reload_step)
            self.reload(self.config.reload_step, self.sess, self.model.saver)

        for cur_epoch in range(self.config.epoch):
            self.logger.info('epoch: {}'.format(int(cur_epoch)))
            self.train_epoch(cur_epoch)
            self.test_epoch()

    def train_epoch(self, cur_epoch):
        loss_list = []
        acc_list = []
        for itr, (x, y) in enumerate(tqdm(self.train_loader)):
            feed_dict = {
                self.model.inputs: x,
                self.model.targets: y,
                self.model.n_particles: self.config.train_particles
            }
            '''if itr % 20 == 0:
                acc_test_list = []
                for (x1, y1) in self.test_loader:
                    feed_dict_test = {
                        self.model.inputs: x1,
                        self.model.targets: y1,
                        self.model.is_training: False,
                        self.model.n_particles: self.config.test_particles
                    }
                    acc_test = self.sess.run([self.model.acc], feed_dict=feed_dict_test)

                    acc_test_list.append(acc_test)                

                avg_test_acc = np.mean(acc_test_list)
                self.logger.info("itr %d : test accuracy: %5.4f\n"%(itr, float(avg_test_acc)))'''

            feed_dict.update({self.model.is_training: True})
            self.sess.run([self.model.train_op], feed_dict=feed_dict)

            feed_dict.update({self.model.is_training: False})  # note: that's important
            loss, acc = self.sess.run([self.model.loss, self.model.acc], feed_dict=feed_dict)
            loss_list.append(loss)
            acc_list.append(acc)

            cur_iter = self.model.global_step_tensor.eval(self.sess)
            if cur_iter % self.config.TCov == 0:
                self.sess.run([self.model.cov_update_op], feed_dict=feed_dict)

            if cur_iter % self.config.TInv == 0:
                self.sess.run([self.model.inv_update_op, self.model.var_update_op], feed_dict=feed_dict)
        
        '''covs_lst = []
        for i in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES):
            if "u_c" in i.name or "v_c" in i.name :
                covs_lst.append(i)   # i.name if you want just a name'''

        print('---->saving ', cur_epoch+self.config.reload_step)
        checkpoint_path = os.path.join(self.checkpoint_dir, self.model_name)
        self.model.saver.save(self.sess, checkpoint_path, global_step=cur_epoch+self.config.reload_step)        

        avg_loss = np.mean(loss_list)
        avg_acc = np.mean(acc_list)
        self.logger.info("train | loss: %5.4f | accuracy: %5.4f"%(float(avg_loss), float(avg_acc)))

        # summarize
        summaries_dict = dict()
        summaries_dict['train_loss'] = avg_loss
        summaries_dict['train_acc'] = avg_acc

        # summarize
        cur_iter = self.model.global_step_tensor.eval(self.sess)
        self.summarizer.summarize(cur_iter, summaries_dict=summaries_dict)

        # self.model.save(self.sess)

    def test_epoch(self):
        loss_list = []
        acc_list = []
        for (x, y) in self.test_loader:
            feed_dict = {
                self.model.inputs: x,
                self.model.targets: y,
                self.model.is_training: False,
                self.model.n_particles: self.config.test_particles
            }
            loss, acc = self.sess.run([self.model.loss, self.model.acc], feed_dict=feed_dict)
            loss_list.append(loss)
            acc_list.append(acc)

        avg_loss = np.mean(loss_list)
        avg_acc = np.mean(acc_list)
        self.logger.info("test | loss: %5.4f | accuracy: %5.4f\n"%(float(avg_loss), float(avg_acc)))

        # summarize
        summaries_dict = dict()
        summaries_dict['test_loss'] = avg_loss
        summaries_dict['test_acc'] = avg_acc

        # summarize
        cur_iter = self.model.global_step_tensor.eval(self.sess)
        self.summarizer.summarize(cur_iter, summaries_dict=summaries_dict)

    def check_grad(self):
        if self.config.reload_step >= 0 :
            print('---->reloading ', self.config.reload_step)
            self.reload(self.config.reload_step, self.sess, self.model.saver)
         
        (x, y) = next(iter(self.train_loader))

        num_samples = 600
        num_trials = 10

        opt = self.model.optim
        
        trainable_vars = tf.trainable_variables()
        gradient_step = opt.compute_gradients(self.model.total_loss, trainable_vars)

        feed_dict = {self.model.inputs: x, self.model.targets: y, self.model.is_training: True, 
                     self.model.n_particles: self.config.train_particles}

        W1_shape = [784, 512]
        W2_shape = [512, 512]
        W3_shape = [512, 512]
        W4_shape = [512, 512]
        W5_shape = [512, 10]

        W1_grad_var = np.zeros([num_trials])
        W2_grad_var = np.zeros([num_trials])
        W3_grad_var = np.zeros([num_trials])
        W4_grad_var = np.zeros([num_trials])
        W5_grad_var = np.zeros([num_trials])


        for i in range(num_trials) :
            print('Iter {}/{}'.format(i, num_trials))
            W1_grad_lst = np.zeros([num_samples,W1_shape[0],W1_shape[1]])
            W2_grad_lst = np.zeros([num_samples,W2_shape[0],W2_shape[1]])
            W3_grad_lst = np.zeros([num_samples,W3_shape[0],W3_shape[1]])
            W4_grad_lst = np.zeros([num_samples,W4_shape[0],W4_shape[1]])
            W5_grad_lst = np.zeros([num_samples,W5_shape[0],W5_shape[1]])

            for j in range(num_samples) :
                grad_W = self.sess.run(gradient_step, feed_dict=feed_dict)
                W1_grad_lst[j,:,:] = grad_W[0][0]
                W2_grad_lst[j,:,:] = grad_W[2][0]
                W3_grad_lst[j,:,:] = grad_W[4][0]
                W4_grad_lst[j,:,:] = grad_W[6][0]
                W5_grad_lst[j,:,:] = grad_W[8][0]

            W1_grad_var[i] = np.mean(np.var(W1_grad_lst, axis=0))
            W2_grad_var[i] = np.mean(np.var(W2_grad_lst, axis=0))
            W3_grad_var[i] = np.mean(np.var(W3_grad_lst, axis=0))
            W4_grad_var[i] = np.mean(np.var(W4_grad_lst, axis=0))
            W5_grad_var[i] = np.mean(np.var(W5_grad_lst, axis=0))

        print("Batch size: ",str(self.config.batch_size)," With flip: ",str(self.config.use_flip),", W1 gradients has variance: \n",W1_grad_var)
        print("Batch size: ",str(self.config.batch_size)," With flip: ",str(self.config.use_flip),", W2 gradients has variance: \n",W2_grad_var)
        print("Batch size: ",str(self.config.batch_size)," With flip: ",str(self.config.use_flip),", W3 gradients has variance: \n",W3_grad_var)
        print("Batch size: ",str(self.config.batch_size)," With flip: ",str(self.config.use_flip),", W4 gradients has variance: \n",W4_grad_var)
        print("Batch size: ",str(self.config.batch_size)," With flip: ",str(self.config.use_flip),", W5 gradients has variance: \n",W5_grad_var)


        grad_save_path = '{}/batch{}'.format(GRAD_CHECK_ROOT_DIR, self.config.batch_size)
        if not os.path.exists(grad_save_path):
            os.makedirs(grad_save_path)

        if self.config.use_flip :
            with open('{}/ptb_var_87_train_acc_flip.pkl'.format(grad_save_path), 'wb') as f2:
                pickle.dump([W1_grad_var, W2_grad_var, W3_grad_var, W4_grad_var], f2)
                print('======================save_flip_model_batch_size_{}========================='.format(self.config.batch_size))
        else :
            with open('{}/ptb_var_87_train_acc_pert.pkl'.format(grad_save_path), 'wb') as f1:
                pickle.dump([W1_grad_var, W2_grad_var, W3_grad_var, W4_grad_var], f1)
                print('======================save_pert_model_batch_size_{}========================='.format(self.config.batch_size))


    def reload(self, step, sess, saver) :
        checkpoint_path = os.path.join(self.checkpoint_dir, self.model_name)
        model_path = checkpoint_path+'-'+str(step)
        if not os.path.exists(model_path+'.meta') :
            print('------- no such checkpoint', model_path)
            return
        print('---->restoring ', step)
        saver.restore(sess, model_path)
TCov: 10
TInv: 200
batch_norm: false
batch_size: 128
checkpoint_dir: ./experiments/mnist/noisy-kfac/checkpoint/
cov_ema_decay: 0.99
damping: 0.001
data_aug: true
data_path: ./data
dataset: mnist
epoch: 180
eta: 0.1
exp_name: noisy-kfac
fisher_approx: kron
fix_batch: false
kl: 0.2
kl_clip: 0.001
learning_rate: 0.0001
max_to_keep: 0
model_name: vgg16
momentum: 0.9
num_workers: 2
optimizer: kfac
reload_step: 0
summary_dir: ./experiments/mnist/noisy-kfac/summary/128batch/NoFlip/
test_batch_size: 100
test_particles: 1
train_particles: 1
use_flip: false

epoch: 0
train | loss: 2.2494 | accuracy: 0.2539
test | loss: 2.1925 | accuracy: 0.4035

epoch: 1
train | loss: 2.1179 | accuracy: 0.5322
test | loss: 2.0014 | accuracy: 0.6431

epoch: 2
train | loss: 1.7836 | accuracy: 0.6865
test | loss: 1.4509 | accuracy: 0.7390

epoch: 3
train | loss: 1.0387 | accuracy: 0.7953
test | loss: 0.6401 | accuracy: 0.8721

epoch: 4
train | loss: 0.4715 | accuracy: 0.8919
test | loss: 0.3325 | accuracy: 0.9163

epoch: 5
train | loss: 0.2924 | accuracy: 0.9217
test | loss: 0.2418 | accuracy: 0.9335

epoch: 6
train | loss: 0.2203 | accuracy: 0.9399
test | loss: 0.1956 | accuracy: 0.9452

epoch: 7
train | loss: 0.1787 | accuracy: 0.9512
test | loss: 0.1641 | accuracy: 0.9531

epoch: 8
train | loss: 0.1566 | accuracy: 0.9560
test | loss: 0.1651 | accuracy: 0.9519

epoch: 9
train | loss: 0.1432 | accuracy: 0.9587
test | loss: 0.1511 | accuracy: 0.9553

epoch: 10
train | loss: 0.1367 | accuracy: 0.9594
test | loss: 0.1408 | accuracy: 0.9560

epoch: 11
train | loss: 0.1248 | accuracy: 0.9610
test | loss: 0.1427 | accuracy: 0.9580

epoch: 12
train | loss: 0.1196 | accuracy: 0.9616
test | loss: 0.1479 | accuracy: 0.9563

epoch: 13
train | loss: 0.1100 | accuracy: 0.9653
test | loss: 0.1390 | accuracy: 0.9584

epoch: 14
train | loss: 0.1099 | accuracy: 0.9646
test | loss: 0.1480 | accuracy: 0.9578

epoch: 15
train | loss: 0.1064 | accuracy: 0.9664
test | loss: 0.1473 | accuracy: 0.9584

epoch: 16
train | loss: 0.1016 | accuracy: 0.9677
test | loss: 0.1383 | accuracy: 0.9618

epoch: 17
train | loss: 0.0960 | accuracy: 0.9697
test | loss: 0.1639 | accuracy: 0.9573

epoch: 18
train | loss: 0.1014 | accuracy: 0.9694
test | loss: 0.1621 | accuracy: 0.9585

epoch: 19
train | loss: 0.0864 | accuracy: 0.9732
test | loss: 0.1619 | accuracy: 0.9590

epoch: 20
train | loss: 0.0853 | accuracy: 0.9745
test | loss: 0.1724 | accuracy: 0.9596

epoch: 21
train | loss: 0.0876 | accuracy: 0.9738
test | loss: 0.1727 | accuracy: 0.9587

epoch: 22
train | loss: 0.0863 | accuracy: 0.9758
test | loss: 0.1930 | accuracy: 0.9598

epoch: 23
train | loss: 0.0893 | accuracy: 0.9762
test | loss: 0.1819 | accuracy: 0.9609

epoch: 24
train | loss: 0.0832 | accuracy: 0.9772
test | loss: 0.1976 | accuracy: 0.9634

epoch: 25
train | loss: 0.0803 | accuracy: 0.9792
test | loss: 0.1835 | accuracy: 0.9658

epoch: 26
train | loss: 0.0848 | accuracy: 0.9783
test | loss: 0.2238 | accuracy: 0.9618

epoch: 27
train | loss: 0.0918 | accuracy: 0.9779
test | loss: 0.2555 | accuracy: 0.9603

epoch: 28
train | loss: 0.0932 | accuracy: 0.9793
test | loss: 0.2279 | accuracy: 0.9649

epoch: 29
train | loss: 0.0816 | accuracy: 0.9821
test | loss: 0.2555 | accuracy: 0.9615

epoch: 30
train | loss: 0.0887 | accuracy: 0.9810
test | loss: 0.2614 | accuracy: 0.9646

epoch: 31
train | loss: 0.0994 | accuracy: 0.9808
test | loss: 0.3170 | accuracy: 0.9619

epoch: 32
train | loss: 0.0920 | accuracy: 0.9820
test | loss: 0.3342 | accuracy: 0.9610

epoch: 33
train | loss: 0.0901 | accuracy: 0.9827
test | loss: 0.3216 | accuracy: 0.9649

epoch: 34
train | loss: 0.0951 | accuracy: 0.9826
test | loss: 0.3819 | accuracy: 0.9616

epoch: 35
train | loss: 0.1009 | accuracy: 0.9829
test | loss: 0.3810 | accuracy: 0.9649

epoch: 36
train | loss: 0.1130 | accuracy: 0.9824
test | loss: 0.3954 | accuracy: 0.9621

epoch: 37
train | loss: 0.1242 | accuracy: 0.9823
test | loss: 0.4313 | accuracy: 0.9659

epoch: 38
train | loss: 0.1315 | accuracy: 0.9825
test | loss: 0.4654 | accuracy: 0.9616

epoch: 39
train | loss: 0.1312 | accuracy: 0.9835
test | loss: 0.5269 | accuracy: 0.9649

epoch: 40
train | loss: 0.1223 | accuracy: 0.9850
test | loss: 0.4680 | accuracy: 0.9657

epoch: 41
train | loss: 0.1426 | accuracy: 0.9834
test | loss: 0.5758 | accuracy: 0.9640

epoch: 42
train | loss: 0.1454 | accuracy: 0.9846
test | loss: 0.6128 | accuracy: 0.9637

epoch: 43
train | loss: 0.1471 | accuracy: 0.9856
test | loss: 0.5902 | accuracy: 0.9667

epoch: 44
train | loss: 0.1399 | accuracy: 0.9865
test | loss: 0.6752 | accuracy: 0.9651

epoch: 45
train | loss: 0.1608 | accuracy: 0.9861
test | loss: 0.6997 | accuracy: 0.9663

epoch: 46
train | loss: 0.1550 | accuracy: 0.9874
test | loss: 0.6785 | accuracy: 0.9711

epoch: 47
train | loss: 0.1363 | accuracy: 0.9888
test | loss: 0.7887 | accuracy: 0.9665

epoch: 48
train | loss: 0.1591 | accuracy: 0.9879
test | loss: 0.8484 | accuracy: 0.9641

epoch: 49
train | loss: 0.1374 | accuracy: 0.9893
test | loss: 0.8179 | accuracy: 0.9673

epoch: 50
train | loss: 0.1398 | accuracy: 0.9897
test | loss: 0.8579 | accuracy: 0.9674

epoch: 51
train | loss: 0.1136 | accuracy: 0.9914
test | loss: 0.8157 | accuracy: 0.9717

epoch: 52
train | loss: 0.1174 | accuracy: 0.9917
test | loss: 0.8919 | accuracy: 0.9679

epoch: 53
train | loss: 0.1397 | accuracy: 0.9910
test | loss: 1.0212 | accuracy: 0.9695

epoch: 54
train | loss: 0.1581 | accuracy: 0.9901
test | loss: 0.9270 | accuracy: 0.9710

epoch: 55
train | loss: 0.2022 | accuracy: 0.9888
test | loss: 1.0067 | accuracy: 0.9708

epoch: 56
train | loss: 0.1321 | accuracy: 0.9925
test | loss: 1.0293 | accuracy: 0.9719

epoch: 57
train | loss: 0.1072 | accuracy: 0.9934
test | loss: 1.0157 | accuracy: 0.9727

epoch: 58
train | loss: 0.1436 | accuracy: 0.9924
test | loss: 1.1784 | accuracy: 0.9688

epoch: 59
train | loss: 0.1614 | accuracy: 0.9912
test | loss: 1.2809 | accuracy: 0.9679

epoch: 60
train | loss: 0.1938 | accuracy: 0.9911
test | loss: 1.3208 | accuracy: 0.9725

epoch: 61
train | loss: 0.1192 | accuracy: 0.9942
test | loss: 1.2411 | accuracy: 0.9712

epoch: 62
train | loss: 0.1297 | accuracy: 0.9934
test | loss: 1.3352 | accuracy: 0.9707

epoch: 63
train | loss: 0.1367 | accuracy: 0.9934
test | loss: 1.3305 | accuracy: 0.9702

epoch: 64
train | loss: 0.1182 | accuracy: 0.9942
test | loss: 1.4165 | accuracy: 0.9723

epoch: 65
train | loss: 0.1505 | accuracy: 0.9936
test | loss: 1.3850 | accuracy: 0.9732

epoch: 66
train | loss: 0.1448 | accuracy: 0.9936
test | loss: 1.3786 | accuracy: 0.9700

epoch: 67
train | loss: 0.1385 | accuracy: 0.9933
test | loss: 1.5673 | accuracy: 0.9700

epoch: 68
train | loss: 0.1623 | accuracy: 0.9936
test | loss: 1.5137 | accuracy: 0.9702

epoch: 69
train | loss: 0.1079 | accuracy: 0.9955
test | loss: 1.5829 | accuracy: 0.9718

epoch: 70
train | loss: 0.0999 | accuracy: 0.9952
test | loss: 1.4854 | accuracy: 0.9726

epoch: 71
train | loss: 0.1214 | accuracy: 0.9949
test | loss: 1.5430 | accuracy: 0.9728

epoch: 72
train | loss: 0.0802 | accuracy: 0.9963
test | loss: 1.3987 | accuracy: 0.9761

epoch: 73
train | loss: 0.0824 | accuracy: 0.9967
test | loss: 1.3331 | accuracy: 0.9744

epoch: 74
train | loss: 0.0794 | accuracy: 0.9962
test | loss: 1.4572 | accuracy: 0.9729

epoch: 75
train | loss: 0.1090 | accuracy: 0.9954
test | loss: 1.6205 | accuracy: 0.9712

epoch: 76
train | loss: 0.1909 | accuracy: 0.9927
test | loss: 1.7157 | accuracy: 0.9724

epoch: 77
train | loss: 0.1305 | accuracy: 0.9949
test | loss: 1.5629 | accuracy: 0.9735

epoch: 78
train | loss: 0.1140 | accuracy: 0.9956
test | loss: 1.7939 | accuracy: 0.9734

epoch: 79
train | loss: 0.1342 | accuracy: 0.9953
test | loss: 1.6587 | accuracy: 0.9731

epoch: 80
train | loss: 0.1618 | accuracy: 0.9942
test | loss: 1.6580 | accuracy: 0.9729

epoch: 81
train | loss: 0.0984 | accuracy: 0.9963
test | loss: 1.7247 | accuracy: 0.9765

epoch: 82
train | loss: 0.0806 | accuracy: 0.9968
test | loss: 1.7552 | accuracy: 0.9752

epoch: 83
train | loss: 0.0825 | accuracy: 0.9969
test | loss: 1.6198 | accuracy: 0.9741

epoch: 84
train | loss: 0.0749 | accuracy: 0.9969
test | loss: 1.5823 | accuracy: 0.9749

epoch: 85
train | loss: 0.0864 | accuracy: 0.9965
test | loss: 1.8175 | accuracy: 0.9745

epoch: 86
train | loss: 0.0811 | accuracy: 0.9967
test | loss: 1.4854 | accuracy: 0.9768

epoch: 87
train | loss: 0.0784 | accuracy: 0.9969
test | loss: 1.6601 | accuracy: 0.9742

epoch: 88
train | loss: 0.0769 | accuracy: 0.9968
test | loss: 1.6034 | accuracy: 0.9745

epoch: 89
train | loss: 0.1013 | accuracy: 0.9966
test | loss: 1.5871 | accuracy: 0.9749

epoch: 90
train | loss: 0.1074 | accuracy: 0.9958
test | loss: 1.5865 | accuracy: 0.9758

epoch: 91
train | loss: 0.0718 | accuracy: 0.9972
test | loss: 1.5020 | accuracy: 0.9770

epoch: 92
train | loss: 0.1193 | accuracy: 0.9954
test | loss: 1.6789 | accuracy: 0.9735

epoch: 93
train | loss: 0.1359 | accuracy: 0.9954
test | loss: 1.8552 | accuracy: 0.9719

epoch: 94
train | loss: 0.1846 | accuracy: 0.9939
test | loss: 2.0275 | accuracy: 0.9698

epoch: 95
train | loss: 0.1313 | accuracy: 0.9953
test | loss: 1.6248 | accuracy: 0.9782

epoch: 96
train | loss: 0.0791 | accuracy: 0.9968
test | loss: 1.6447 | accuracy: 0.9758

epoch: 97
train | loss: 0.0837 | accuracy: 0.9968
test | loss: 1.6194 | accuracy: 0.9762

epoch: 98
train | loss: 0.0881 | accuracy: 0.9969
test | loss: 1.4959 | accuracy: 0.9772

epoch: 99
train | loss: 0.0549 | accuracy: 0.9978
test | loss: 1.7091 | accuracy: 0.9773

epoch: 100
train | loss: 0.0771 | accuracy: 0.9970
test | loss: 1.5626 | accuracy: 0.9762

epoch: 101
train | loss: 0.1188 | accuracy: 0.9959
test | loss: 1.4634 | accuracy: 0.9770

epoch: 102
train | loss: 0.0640 | accuracy: 0.9975
test | loss: 1.5396 | accuracy: 0.9778

epoch: 103
train | loss: 0.0389 | accuracy: 0.9984
test | loss: 1.4433 | accuracy: 0.9803

epoch: 104
train | loss: 0.0635 | accuracy: 0.9975
test | loss: 1.6290 | accuracy: 0.9767

epoch: 105
train | loss: 0.0902 | accuracy: 0.9966
test | loss: 1.5357 | accuracy: 0.9762

epoch: 106
train | loss: 0.0863 | accuracy: 0.9968
test | loss: 1.5706 | accuracy: 0.9781

epoch: 107
train | loss: 0.1134 | accuracy: 0.9961
test | loss: 1.6989 | accuracy: 0.9752

epoch: 108
train | loss: 0.0821 | accuracy: 0.9967
test | loss: 1.6153 | accuracy: 0.9745

epoch: 109
train | loss: 0.1039 | accuracy: 0.9965
test | loss: 1.6556 | accuracy: 0.9751

epoch: 110
train | loss: 0.1076 | accuracy: 0.9960
test | loss: 1.7312 | accuracy: 0.9761

epoch: 111
train | loss: 0.0623 | accuracy: 0.9974
test | loss: 1.3995 | accuracy: 0.9797

epoch: 112
train | loss: 0.0695 | accuracy: 0.9970
test | loss: 1.5617 | accuracy: 0.9770

epoch: 113
train | loss: 0.0704 | accuracy: 0.9971
test | loss: 1.4126 | accuracy: 0.9784

epoch: 114
train | loss: 0.0440 | accuracy: 0.9982
test | loss: 1.4228 | accuracy: 0.9790

epoch: 115
train | loss: 0.0593 | accuracy: 0.9977
test | loss: 1.5630 | accuracy: 0.9769

epoch: 116
train | loss: 0.0951 | accuracy: 0.9966
test | loss: 1.6320 | accuracy: 0.9769

epoch: 117
train | loss: 0.0952 | accuracy: 0.9964
test | loss: 1.5046 | accuracy: 0.9787

epoch: 118
train | loss: 0.1193 | accuracy: 0.9960
test | loss: 1.6739 | accuracy: 0.9739

epoch: 119
train | loss: 0.1315 | accuracy: 0.9954
test | loss: 1.6798 | accuracy: 0.9775

epoch: 120
train | loss: 0.1003 | accuracy: 0.9963
test | loss: 1.5143 | accuracy: 0.9775

epoch: 121
train | loss: 0.1074 | accuracy: 0.9959
test | loss: 1.6870 | accuracy: 0.9752

epoch: 122
train | loss: 0.1478 | accuracy: 0.9948
test | loss: 1.6173 | accuracy: 0.9730

epoch: 123
train | loss: 0.1486 | accuracy: 0.9951
test | loss: 1.5114 | accuracy: 0.9764

epoch: 124
train | loss: 0.0729 | accuracy: 0.9969
test | loss: 1.5523 | accuracy: 0.9780

epoch: 125
train | loss: 0.0831 | accuracy: 0.9972
test | loss: 1.4133 | accuracy: 0.9774

epoch: 126
train | loss: 0.0637 | accuracy: 0.9974
test | loss: 1.4648 | accuracy: 0.9774

epoch: 127
train | loss: 0.0935 | accuracy: 0.9966
test | loss: 1.4568 | accuracy: 0.9772

epoch: 128
train | loss: 0.0620 | accuracy: 0.9976
test | loss: 1.5063 | accuracy: 0.9782

epoch: 129
train | loss: 0.0700 | accuracy: 0.9971
test | loss: 1.6560 | accuracy: 0.9764

epoch: 130
train | loss: 0.0699 | accuracy: 0.9975
test | loss: 1.6930 | accuracy: 0.9756

epoch: 131
train | loss: 0.0793 | accuracy: 0.9971
test | loss: 1.5738 | accuracy: 0.9779

epoch: 132
train | loss: 0.0672 | accuracy: 0.9974
test | loss: 1.4307 | accuracy: 0.9807

epoch: 133
train | loss: 0.0440 | accuracy: 0.9980
test | loss: 1.3468 | accuracy: 0.9781

epoch: 134
train | loss: 0.0730 | accuracy: 0.9973
test | loss: 1.5421 | accuracy: 0.9772

epoch: 135
train | loss: 0.1080 | accuracy: 0.9961
test | loss: 1.5770 | accuracy: 0.9772

epoch: 136
train | loss: 0.1008 | accuracy: 0.9964
test | loss: 1.6213 | accuracy: 0.9757

epoch: 137
train | loss: 0.1180 | accuracy: 0.9953
test | loss: 1.5355 | accuracy: 0.9761

epoch: 138
train | loss: 0.0837 | accuracy: 0.9966
test | loss: 1.5458 | accuracy: 0.9751

epoch: 139
train | loss: 0.1133 | accuracy: 0.9955
test | loss: 1.4310 | accuracy: 0.9776

epoch: 140
train | loss: 0.0763 | accuracy: 0.9967
test | loss: 1.5259 | accuracy: 0.9759

epoch: 141
train | loss: 0.0621 | accuracy: 0.9969
test | loss: 1.3745 | accuracy: 0.9774

epoch: 142
train | loss: 0.1059 | accuracy: 0.9957
test | loss: 1.3242 | accuracy: 0.9792

epoch: 143
train | loss: 0.1106 | accuracy: 0.9957
test | loss: 1.5620 | accuracy: 0.9772

epoch: 144
train | loss: 0.0616 | accuracy: 0.9976
test | loss: 1.4001 | accuracy: 0.9792

epoch: 145
train | loss: 0.0605 | accuracy: 0.9977
test | loss: 1.4009 | accuracy: 0.9787

epoch: 146
train | loss: 0.0658 | accuracy: 0.9970
test | loss: 1.4909 | accuracy: 0.9778

epoch: 147
train | loss: 0.1030 | accuracy: 0.9963
test | loss: 1.3808 | accuracy: 0.9795

epoch: 148
train | loss: 0.0755 | accuracy: 0.9972
test | loss: 1.2229 | accuracy: 0.9780

epoch: 149
train | loss: 0.0879 | accuracy: 0.9965
test | loss: 1.5970 | accuracy: 0.9748

epoch: 150
train | loss: 0.0880 | accuracy: 0.9966
test | loss: 1.4007 | accuracy: 0.9769

epoch: 151
train | loss: 0.1008 | accuracy: 0.9959
test | loss: 1.3602 | accuracy: 0.9791

epoch: 152
train | loss: 0.1117 | accuracy: 0.9957
test | loss: 1.4567 | accuracy: 0.9764

epoch: 153
train | loss: 0.0746 | accuracy: 0.9968
test | loss: 1.3999 | accuracy: 0.9783

epoch: 154
train | loss: 0.1204 | accuracy: 0.9954
test | loss: 1.3865 | accuracy: 0.9764

epoch: 155
train | loss: 0.1858 | accuracy: 0.9935
test | loss: 1.5700 | accuracy: 0.9744

epoch: 156
train | loss: 0.1801 | accuracy: 0.9929
test | loss: 1.7860 | accuracy: 0.9723

epoch: 157
train | loss: 0.1454 | accuracy: 0.9951
test | loss: 1.2962 | accuracy: 0.9803

epoch: 158
train | loss: 0.0592 | accuracy: 0.9975
test | loss: 1.2711 | accuracy: 0.9788

epoch: 159
train | loss: 0.0852 | accuracy: 0.9970
test | loss: 1.4567 | accuracy: 0.9758

epoch: 160
train | loss: 0.1013 | accuracy: 0.9960
test | loss: 1.4590 | accuracy: 0.9759

epoch: 161
train | loss: 0.1044 | accuracy: 0.9957
test | loss: 1.2880 | accuracy: 0.9774

epoch: 162
train | loss: 0.0672 | accuracy: 0.9971
test | loss: 1.4751 | accuracy: 0.9764

epoch: 163
train | loss: 0.0867 | accuracy: 0.9965
test | loss: 1.3160 | accuracy: 0.9780

epoch: 164
train | loss: 0.0520 | accuracy: 0.9976
test | loss: 1.2377 | accuracy: 0.9794

epoch: 165
train | loss: 0.0805 | accuracy: 0.9965
test | loss: 1.3608 | accuracy: 0.9777

epoch: 166
train | loss: 0.0925 | accuracy: 0.9962
test | loss: 1.4049 | accuracy: 0.9779

epoch: 167
train | loss: 0.0738 | accuracy: 0.9968
test | loss: 1.3281 | accuracy: 0.9777

epoch: 168
train | loss: 0.0878 | accuracy: 0.9965
test | loss: 1.3854 | accuracy: 0.9779

epoch: 169
train | loss: 0.1045 | accuracy: 0.9957
test | loss: 1.2913 | accuracy: 0.9771

epoch: 170
train | loss: 0.0688 | accuracy: 0.9972
test | loss: 1.3316 | accuracy: 0.9794

epoch: 171
train | loss: 0.0731 | accuracy: 0.9969
test | loss: 1.3315 | accuracy: 0.9773

epoch: 172
train | loss: 0.0807 | accuracy: 0.9963
test | loss: 1.3908 | accuracy: 0.9777

epoch: 173
train | loss: 0.0959 | accuracy: 0.9958
test | loss: 1.3001 | accuracy: 0.9773

epoch: 174
train | loss: 0.1080 | accuracy: 0.9955
test | loss: 1.3132 | accuracy: 0.9779

epoch: 175
train | loss: 0.0911 | accuracy: 0.9963
test | loss: 1.4699 | accuracy: 0.9762

epoch: 176
train | loss: 0.1001 | accuracy: 0.9957
test | loss: 1.2125 | accuracy: 0.9761

epoch: 177
train | loss: 0.0837 | accuracy: 0.9963
test | loss: 1.3009 | accuracy: 0.9789

epoch: 178
train | loss: 0.0919 | accuracy: 0.9960
test | loss: 1.4070 | accuracy: 0.9761

epoch: 179
train | loss: 0.1517 | accuracy: 0.9948
test | loss: 1.2871 | accuracy: 0.9774

