/h/minfanzh/noisy-K-FAC_use_all_FC/main.py
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import tensorflow as tf
import numpy as np
import os

from misc.utils import get_logger, get_args, makedirs
from misc.config import process_config
from misc.data_loader import load_pytorch
from core.model import Model
from core.train import Trainer


_INPUT_DIM = {
    'fmnist': [784],
    'mnist': [784],
    'cifar10': [32, 32, 3],
    'cifar100': [32, 32, 3]
}


def main():
    tf.set_random_seed(1231)
    np.random.seed(1231)

    try:
        args = get_args()
        config = process_config(args.config)
    except:
        print("Add a config file using \'--config file_name.json\'")
        exit(1)

    makedirs(config.summary_dir)
    makedirs(config.checkpoint_dir)

    # set logger
    path = os.path.dirname(os.path.abspath(__file__))
    path1 = os.path.join(path, 'core/model.py')
    path2 = os.path.join(path, 'core/train.py')
    logger = get_logger('log', logpath=config.summary_dir+'/',
                        filepath=os.path.abspath(__file__), package_files=[path1, path2])

    logger.info(config)

    # load data
    train_loader, test_loader = load_pytorch(config)

    # define computational graph
    sess = tf.Session()

    model_ = Model(config, _INPUT_DIM[config.dataset], len(train_loader.dataset))
    trainer = Trainer(sess, model_, train_loader, test_loader, config, logger)

    trainer.train()
    #trainer.check_grad()

if __name__ == "__main__":
    main()

/h/minfanzh/noisy-K-FAC_use_all_FC/core/model.py
import tensorflow as tf

from ops import optimizer as opt
from ops import layer_collection as lc
from ops import sampler as sp
from network.registry import get_model
from core.base_model import BaseModel


class Model(BaseModel):
    def __init__(self, config, input_dim, n_data):
        super().__init__(config)
        self.layer_collection = lc.LayerCollection()
        self.input_dim = input_dim
        self.n_data = n_data

        self.cov_update_op = None
        self.inv_update_op = None

        self.build_model()
        self.init_optim()
        self.init_saver()

    @property
    def trainable_variables(self):
        # note: we don't train the params of BN
        vars = []
        for var in tf.trainable_variables():
            if "w" in var.name:
                vars.append(var)
        return vars

    def build_model(self):
        self.inputs = tf.placeholder(tf.float32, [None] + self.input_dim)
        self.targets = tf.placeholder(tf.int64, [None])
        self.is_training = tf.placeholder(tf.bool)
        self.n_particles = tf.placeholder(tf.int32)

        inputs = self.inputs
        net = get_model(self.config.model_name)

        self.sampler = sp.Sampler(self.config, self.n_data, self.n_particles)
        logits, l2_loss = net(inputs, self.sampler, self.is_training,
                              self.config.batch_norm, self.layer_collection,
                              self.n_particles, self.config)

        # ensemble
        logits_ = tf.reduce_mean(
            tf.reshape(logits, [self.n_particles, -1, tf.shape(logits)[-1]]), 0)
        self.acc = tf.reduce_mean(tf.cast(tf.equal(
            self.targets, tf.argmax(logits_, axis=1)), dtype=tf.float32))

        targets_ = tf.tile(self.targets, [self.n_particles])
        self.loss = tf.reduce_mean(
            tf.nn.sparse_softmax_cross_entropy_with_logits(
                labels=targets_, logits=logits))

        coeff = self.config.kl / (self.n_data * self.config.eta)
        self.total_loss = self.loss + coeff * l2_loss

    def init_optim(self):
        self.optim = opt.KFACOptimizer(var_list=self.trainable_variables,
                                       learning_rate=self.config.learning_rate,
                                       cov_ema_decay=self.config.cov_ema_decay,
                                       damping=self.config.damping,
                                       layer_collection=self.layer_collection,
                                       norm_constraint=tf.train.exponential_decay(self.config.kl_clip,
                                                                                  self.global_step_tensor,
                                                                                  390, 0.95, staircase=True),
                                       momentum=self.config.momentum)

        self.cov_update_op = self.optim.cov_update_op
        self.inv_update_op = self.optim.inv_update_op

        with tf.control_dependencies([self.inv_update_op]):
            self.var_update_op = self.sampler.update(self.layer_collection.get_blocks())

        update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS)
        with tf.control_dependencies(update_ops):
            self.train_op = self.optim.minimize(self.total_loss, global_step=self.global_step_tensor)

    def init_saver(self):
        covs_lst = []
        for i in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES):
            if "u_c" in i.name or "v_c" in i.name :
                covs_lst.append(i)   # i.name if you want just a name
        var_lst = tf.trainable_variables() + covs_lst
        self.saver = tf.train.Saver(var_list=var_lst, max_to_keep=self.config.max_to_keep)


/h/minfanzh/noisy-K-FAC_use_all_FC/core/train.py
from core.base_train import BaseTrain
from tqdm import tqdm
import numpy as np

import os
import tensorflow as tf
import pickle as pickle

GRAD_CHECK_ROOT_DIR = './grad_checks_FC_KFAC'


class Trainer(BaseTrain):
    def __init__(self, sess, model, train_loader, test_loader, config, logger):
        super(Trainer, self).__init__(sess, model, config, logger)
        self.train_loader = train_loader
        self.test_loader = test_loader

        self.checkpoint_dir = './checkpoint_KFAC_FC_flip'
        self.model_name = 'model'

    def train(self):
        if self.config.reload_step > 0 :
            print('---->reloading ', self.config.reload_step)
            self.reload(self.config.reload_step, self.sess, self.model.saver)

        for cur_epoch in range(self.config.epoch):
            self.logger.info('epoch: {}'.format(int(cur_epoch)))
            self.train_epoch(cur_epoch)
            self.test_epoch()

    def train_epoch(self, cur_epoch):
        loss_list = []
        acc_list = []
        for itr, (x, y) in enumerate(tqdm(self.train_loader)):
            feed_dict = {
                self.model.inputs: x,
                self.model.targets: y,
                self.model.n_particles: self.config.train_particles
            }
            '''if itr % 20 == 0:
                acc_test_list = []
                for (x1, y1) in self.test_loader:
                    feed_dict_test = {
                        self.model.inputs: x1,
                        self.model.targets: y1,
                        self.model.is_training: False,
                        self.model.n_particles: self.config.test_particles
                    }
                    acc_test = self.sess.run([self.model.acc], feed_dict=feed_dict_test)

                    acc_test_list.append(acc_test)                

                avg_test_acc = np.mean(acc_test_list)
                self.logger.info("itr %d : test accuracy: %5.4f\n"%(itr, float(avg_test_acc)))'''

            feed_dict.update({self.model.is_training: True})
            self.sess.run([self.model.train_op], feed_dict=feed_dict)

            feed_dict.update({self.model.is_training: False})  # note: that's important
            loss, acc = self.sess.run([self.model.loss, self.model.acc], feed_dict=feed_dict)
            loss_list.append(loss)
            acc_list.append(acc)

            cur_iter = self.model.global_step_tensor.eval(self.sess)
            if cur_iter % self.config.TCov == 0:
                self.sess.run([self.model.cov_update_op], feed_dict=feed_dict)

            if cur_iter % self.config.TInv == 0:
                self.sess.run([self.model.inv_update_op, self.model.var_update_op], feed_dict=feed_dict)
        
        '''covs_lst = []
        for i in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES):
            if "u_c" in i.name or "v_c" in i.name :
                covs_lst.append(i)   # i.name if you want just a name'''

        print('---->saving ', cur_epoch+self.config.reload_step)
        checkpoint_path = os.path.join(self.checkpoint_dir, self.model_name)
        self.model.saver.save(self.sess, checkpoint_path, global_step=cur_epoch+self.config.reload_step)        

        avg_loss = np.mean(loss_list)
        avg_acc = np.mean(acc_list)
        self.logger.info("train | loss: %5.4f | accuracy: %5.4f"%(float(avg_loss), float(avg_acc)))

        # summarize
        summaries_dict = dict()
        if self.config.use_flip :
            summaries_dict['train_loss_flip'] = avg_loss
            summaries_dict['train_acc_flip'] = avg_acc
        else :
            summaries_dict['train_loss'] = avg_loss
            summaries_dict['train_acc'] = avg_acc

        # summarize
        cur_iter = self.model.global_step_tensor.eval(self.sess)
        self.summarizer.summarize(cur_iter, summaries_dict=summaries_dict)

        # self.model.save(self.sess)

    def test_epoch(self):
        loss_list = []
        acc_list = []
        for (x, y) in self.test_loader:
            feed_dict = {
                self.model.inputs: x,
                self.model.targets: y,
                self.model.is_training: False,
                self.model.n_particles: self.config.test_particles
            }
            loss, acc = self.sess.run([self.model.loss, self.model.acc], feed_dict=feed_dict)
            loss_list.append(loss)
            acc_list.append(acc)

        avg_loss = np.mean(loss_list)
        avg_acc = np.mean(acc_list)
        self.logger.info("test | loss: %5.4f | accuracy: %5.4f\n"%(float(avg_loss), float(avg_acc)))

        # summarize
        summaries_dict = dict()
        if self.config.use_flip :
            summaries_dict['test_loss_flip'] = avg_loss
            summaries_dict['test_acc_flip'] = avg_acc
        else :
            summaries_dict['test_loss'] = avg_loss
            summaries_dict['test_acc'] = avg_acc

        # summarize
        cur_iter = self.model.global_step_tensor.eval(self.sess)
        self.summarizer.summarize(cur_iter, summaries_dict=summaries_dict)

    def check_grad(self):
        if self.config.reload_step > 0 :
            print('---->reloading ', self.config.reload_step)
            self.reload(self.config.reload_step, self.sess, self.model.saver)
         
        (x, y) = next(iter(self.train_loader))

        #print("y[0] is ", y[0])
        #print("y[1] is ", y[1])
        #print("y[2] is ", y[2])
        #print("y[3] is ", y[3])
        #print("y[4] is ", y[4])
        num_samples = 500
        num_trials = 10

        opt = self.model.optim
        
        trainable_vars = tf.trainable_variables()
        gradient_step = opt.compute_gradients(self.model.total_loss, trainable_vars)

        feed_dict = {self.model.inputs: x, self.model.targets: y, self.model.is_training: True, 
                     self.model.n_particles: self.config.train_particles}

        W1_shape = [784, 512]
        W2_shape = [512, 512]
        W3_shape = [512, 512]
        W4_shape = [512, 512]
        W5_shape = [512, 256]
        W6_shape = [256, 256]
        W7_shape = [256, 10]

        W1_grad_var = np.zeros([num_trials])
        W2_grad_var = np.zeros([num_trials])
        W3_grad_var = np.zeros([num_trials])
        W4_grad_var = np.zeros([num_trials])
        W5_grad_var = np.zeros([num_trials])
        W6_grad_var = np.zeros([num_trials])
        W7_grad_var = np.zeros([num_trials])

        for i in range(num_trials) :
            print('Iter {}/{}'.format(i, num_trials))
            W1_grad_lst = np.zeros([num_samples,W1_shape[0],W1_shape[1]])
            W2_grad_lst = np.zeros([num_samples,W2_shape[0],W2_shape[1]])
            W3_grad_lst = np.zeros([num_samples,W3_shape[0],W3_shape[1]])
            W4_grad_lst = np.zeros([num_samples,W4_shape[0],W4_shape[1]])
            W5_grad_lst = np.zeros([num_samples,W5_shape[0],W5_shape[1]])
            W6_grad_lst = np.zeros([num_samples,W6_shape[0],W6_shape[1]])
            W7_grad_lst = np.zeros([num_samples,W7_shape[0],W7_shape[1]])

            for j in range(num_samples) :
                grad_W = self.sess.run(gradient_step, feed_dict=feed_dict)
                W1_grad_lst[j,:,:] = grad_W[0][0]
                W2_grad_lst[j,:,:] = grad_W[2][0]
                W3_grad_lst[j,:,:] = grad_W[4][0]
                W4_grad_lst[j,:,:] = grad_W[6][0]
                W5_grad_lst[j,:,:] = grad_W[8][0]
                W6_grad_lst[j,:,:] = grad_W[10][0]
                W7_grad_lst[j,:,:] = grad_W[12][0]

            W1_grad_var[i] = np.mean(np.var(W1_grad_lst, axis=0))
            W2_grad_var[i] = np.mean(np.var(W2_grad_lst, axis=0))
            W3_grad_var[i] = np.mean(np.var(W3_grad_lst, axis=0))
            W4_grad_var[i] = np.mean(np.var(W4_grad_lst, axis=0))
            W5_grad_var[i] = np.mean(np.var(W5_grad_lst, axis=0))
            W6_grad_var[i] = np.mean(np.var(W6_grad_lst, axis=0))
            W7_grad_var[i] = np.mean(np.var(W7_grad_lst, axis=0))

        print("Batch size: ",str(self.config.batch_size)," With flip: ",str(self.config.use_flip),", W1 gradients has variance: \n",W1_grad_var)
        print("Batch size: ",str(self.config.batch_size)," With flip: ",str(self.config.use_flip),", W2 gradients has variance: \n",W2_grad_var)
        print("Batch size: ",str(self.config.batch_size)," With flip: ",str(self.config.use_flip),", W3 gradients has variance: \n",W3_grad_var)
        print("Batch size: ",str(self.config.batch_size)," With flip: ",str(self.config.use_flip),", W4 gradients has variance: \n",W4_grad_var)
        print("Batch size: ",str(self.config.batch_size)," With flip: ",str(self.config.use_flip),", W5 gradients has variance: \n",W5_grad_var)
        print("Batch size: ",str(self.config.batch_size)," With flip: ",str(self.config.use_flip),", W6 gradients has variance: \n",W6_grad_var)
        print("Batch size: ",str(self.config.batch_size)," With flip: ",str(self.config.use_flip),", W7 gradients has variance: \n",W7_grad_var)


        grad_save_path = '{}/batch{}'.format(GRAD_CHECK_ROOT_DIR, self.config.batch_size)
        if not os.path.exists(grad_save_path):
            os.makedirs(grad_save_path)

        if self.config.use_flip :
            with open('{}/ptb_var_flip.pkl'.format(grad_save_path), 'wb') as f2:
                pickle.dump([W1_grad_var, W2_grad_var, W3_grad_var, W4_grad_var, W5_grad_var, W6_grad_var, W7_grad_var], f2)
                print('======================save_flip_model_batch_size_{}========================='.format(self.config.batch_size))
        else :
            with open('{}/ptb_var_pert.pkl'.format(grad_save_path), 'wb') as f1:
                pickle.dump([W1_grad_var, W2_grad_var, W3_grad_var, W4_grad_var, W5_grad_var, W6_grad_var, W7_grad_var], f1)
                print('======================save_pert_model_batch_size_{}========================='.format(self.config.batch_size))


    def reload(self, step, sess, saver) :
        checkpoint_path = os.path.join(self.checkpoint_dir, self.model_name)
        model_path = checkpoint_path+'-'+str(step)
        if not os.path.exists(model_path+'.meta') :
            print('------- no such checkpoint', model_path)
            return
        print('---->restoring ', step)
        saver.restore(sess, model_path)
TCov: 10
TInv: 200
batch_norm: true
batch_size: 512
checkpoint_dir: ./experiments/mnist/noisy-kfac/checkpoint/
cov_ema_decay: 0.99
damping: 0.001
data_aug: true
data_path: ./data
dataset: mnist
epoch: 280
eta: 0.1
exp_name: noisy-kfac
fisher_approx: kron
fix_batch: false
kl: 0.5
kl_clip: 0.001
learning_rate: 0.0001
max_to_keep: 0
model_name: vgg16
momentum: 0.9
num_workers: 2
optimizer: kfac
reload_step: 0
summary_dir: ./experiments/mnist/noisy-kfac/summary/
test_batch_size: 100
test_particles: 1
train_particles: 1
use_flip: false

epoch: 0
train | loss: 2.2533 | accuracy: 0.1829
test | loss: 2.1409 | accuracy: 0.2904

epoch: 1
train | loss: 1.8910 | accuracy: 0.4224
test | loss: 1.5864 | accuracy: 0.5608

epoch: 2
train | loss: 1.3181 | accuracy: 0.6546
test | loss: 1.0764 | accuracy: 0.7273

epoch: 3
train | loss: 0.9409 | accuracy: 0.7658
test | loss: 0.8194 | accuracy: 0.7943

epoch: 4
train | loss: 0.7470 | accuracy: 0.8154
test | loss: 0.6769 | accuracy: 0.8313

epoch: 5
train | loss: 0.6344 | accuracy: 0.8450
test | loss: 0.5862 | accuracy: 0.8525

epoch: 6
train | loss: 0.5566 | accuracy: 0.8651
test | loss: 0.5235 | accuracy: 0.8685

epoch: 7
train | loss: 0.4991 | accuracy: 0.8792
test | loss: 0.4684 | accuracy: 0.8840

epoch: 8
train | loss: 0.4513 | accuracy: 0.8910
test | loss: 0.4289 | accuracy: 0.8949

epoch: 9
train | loss: 0.4080 | accuracy: 0.9011
test | loss: 0.3890 | accuracy: 0.9031

epoch: 10
train | loss: 0.3773 | accuracy: 0.9091
test | loss: 0.3647 | accuracy: 0.9082

epoch: 11
train | loss: 0.3444 | accuracy: 0.9187
test | loss: 0.3429 | accuracy: 0.9151

epoch: 12
train | loss: 0.3211 | accuracy: 0.9229
test | loss: 0.3140 | accuracy: 0.9217

epoch: 13
train | loss: 0.2979 | accuracy: 0.9288
test | loss: 0.3030 | accuracy: 0.9245

epoch: 14
train | loss: 0.2786 | accuracy: 0.9323
test | loss: 0.2771 | accuracy: 0.9303

epoch: 15
train | loss: 0.2619 | accuracy: 0.9374
test | loss: 0.2650 | accuracy: 0.9358

epoch: 16
train | loss: 0.2415 | accuracy: 0.9420
test | loss: 0.2589 | accuracy: 0.9360

epoch: 17
train | loss: 0.2335 | accuracy: 0.9440
test | loss: 0.2391 | accuracy: 0.9414

epoch: 18
train | loss: 0.2217 | accuracy: 0.9456
test | loss: 0.2405 | accuracy: 0.9387

epoch: 19
train | loss: 0.2135 | accuracy: 0.9471
test | loss: 0.2216 | accuracy: 0.9405

epoch: 20
train | loss: 0.2070 | accuracy: 0.9488
test | loss: 0.2223 | accuracy: 0.9410

epoch: 21
train | loss: 0.1944 | accuracy: 0.9509
test | loss: 0.2052 | accuracy: 0.9459

epoch: 22
train | loss: 0.2036 | accuracy: 0.9480
test | loss: 0.2081 | accuracy: 0.9443

epoch: 23
train | loss: 0.1942 | accuracy: 0.9508
test | loss: 0.2247 | accuracy: 0.9409

epoch: 24
train | loss: 0.1929 | accuracy: 0.9508
test | loss: 0.2021 | accuracy: 0.9445

epoch: 25
train | loss: 0.1956 | accuracy: 0.9497
test | loss: 0.2144 | accuracy: 0.9421

epoch: 26
train | loss: 0.1895 | accuracy: 0.9501
test | loss: 0.1944 | accuracy: 0.9453

epoch: 27
train | loss: 0.1999 | accuracy: 0.9484
test | loss: 0.2091 | accuracy: 0.9424

epoch: 28
train | loss: 0.1887 | accuracy: 0.9497
test | loss: 0.2307 | accuracy: 0.9350

epoch: 29
train | loss: 0.2016 | accuracy: 0.9464
test | loss: 0.2026 | accuracy: 0.9435

epoch: 30
train | loss: 0.2019 | accuracy: 0.9457
test | loss: 0.2292 | accuracy: 0.9346

epoch: 31
train | loss: 0.1964 | accuracy: 0.9472
test | loss: 0.2064 | accuracy: 0.9426

epoch: 32
train | loss: 0.2130 | accuracy: 0.9415
test | loss: 0.2204 | accuracy: 0.9377

epoch: 33
train | loss: 0.1967 | accuracy: 0.9449
test | loss: 0.2459 | accuracy: 0.9313

epoch: 34
train | loss: 0.2148 | accuracy: 0.9414
test | loss: 0.2085 | accuracy: 0.9428

epoch: 35
train | loss: 0.2127 | accuracy: 0.9414
test | loss: 0.2345 | accuracy: 0.9310

epoch: 36
train | loss: 0.2051 | accuracy: 0.9426
test | loss: 0.2089 | accuracy: 0.9398

epoch: 37
train | loss: 0.2146 | accuracy: 0.9403
test | loss: 0.2267 | accuracy: 0.9375

epoch: 38
train | loss: 0.1992 | accuracy: 0.9442
test | loss: 0.2478 | accuracy: 0.9317

epoch: 39
train | loss: 0.2263 | accuracy: 0.9371
test | loss: 0.2258 | accuracy: 0.9352

epoch: 40
train | loss: 0.2118 | accuracy: 0.9396
test | loss: 0.2306 | accuracy: 0.9369

epoch: 41
train | loss: 0.2145 | accuracy: 0.9400
test | loss: 0.2138 | accuracy: 0.9383

epoch: 42
train | loss: 0.2165 | accuracy: 0.9405
test | loss: 0.2274 | accuracy: 0.9358

epoch: 43
train | loss: 0.2055 | accuracy: 0.9423
test | loss: 0.2012 | accuracy: 0.9425

epoch: 44
train | loss: 0.2176 | accuracy: 0.9394
test | loss: 0.2181 | accuracy: 0.9360

epoch: 45
train | loss: 0.2056 | accuracy: 0.9426
test | loss: 0.2332 | accuracy: 0.9352

epoch: 46
train | loss: 0.2111 | accuracy: 0.9413
test | loss: 0.2124 | accuracy: 0.9379

epoch: 47
train | loss: 0.2122 | accuracy: 0.9408
test | loss: 0.2317 | accuracy: 0.9349

epoch: 48
train | loss: 0.2049 | accuracy: 0.9443
test | loss: 0.1969 | accuracy: 0.9448

epoch: 49
train | loss: 0.2169 | accuracy: 0.9411
test | loss: 0.2151 | accuracy: 0.9406

epoch: 50
train | loss: 0.2003 | accuracy: 0.9443
test | loss: 0.2243 | accuracy: 0.9354

epoch: 51
train | loss: 0.2041 | accuracy: 0.9437
test | loss: 0.2000 | accuracy: 0.9435

epoch: 52
train | loss: 0.2013 | accuracy: 0.9459
test | loss: 0.2220 | accuracy: 0.9378

epoch: 53
train | loss: 0.1965 | accuracy: 0.9473
test | loss: 0.1930 | accuracy: 0.9433

epoch: 54
train | loss: 0.2019 | accuracy: 0.9452
test | loss: 0.2083 | accuracy: 0.9430

epoch: 55
train | loss: 0.1895 | accuracy: 0.9499
test | loss: 0.2154 | accuracy: 0.9410

epoch: 56
train | loss: 0.1989 | accuracy: 0.9462
test | loss: 0.1953 | accuracy: 0.9469

epoch: 57
train | loss: 0.1911 | accuracy: 0.9482
test | loss: 0.2174 | accuracy: 0.9401

epoch: 58
train | loss: 0.1889 | accuracy: 0.9495
test | loss: 0.1942 | accuracy: 0.9451

epoch: 59
train | loss: 0.1873 | accuracy: 0.9501
test | loss: 0.1981 | accuracy: 0.9452

epoch: 60
train | loss: 0.1799 | accuracy: 0.9512
test | loss: 0.1844 | accuracy: 0.9499

epoch: 61
train | loss: 0.1842 | accuracy: 0.9517
test | loss: 0.1832 | accuracy: 0.9532

epoch: 62
train | loss: 0.1767 | accuracy: 0.9526
test | loss: 0.1953 | accuracy: 0.9472

epoch: 63
train | loss: 0.1783 | accuracy: 0.9527
test | loss: 0.1788 | accuracy: 0.9506

epoch: 64
train | loss: 0.1775 | accuracy: 0.9526
test | loss: 0.1894 | accuracy: 0.9487

epoch: 65
train | loss: 0.1719 | accuracy: 0.9541
test | loss: 0.1780 | accuracy: 0.9507

epoch: 66
train | loss: 0.1746 | accuracy: 0.9535
test | loss: 0.1797 | accuracy: 0.9494

epoch: 67
train | loss: 0.1678 | accuracy: 0.9547
test | loss: 0.1848 | accuracy: 0.9492

epoch: 68
train | loss: 0.1656 | accuracy: 0.9551
test | loss: 0.1699 | accuracy: 0.9537

epoch: 69
train | loss: 0.1642 | accuracy: 0.9561
test | loss: 0.1770 | accuracy: 0.9530

epoch: 70
train | loss: 0.1605 | accuracy: 0.9566
test | loss: 0.1673 | accuracy: 0.9544

epoch: 71
train | loss: 0.1615 | accuracy: 0.9572
test | loss: 0.1711 | accuracy: 0.9536

epoch: 72
train | loss: 0.1523 | accuracy: 0.9598
test | loss: 0.1823 | accuracy: 0.9509

epoch: 73
train | loss: 0.1535 | accuracy: 0.9590
test | loss: 0.1638 | accuracy: 0.9556

epoch: 74
train | loss: 0.1530 | accuracy: 0.9589
test | loss: 0.1688 | accuracy: 0.9549

epoch: 75
train | loss: 0.1527 | accuracy: 0.9594
test | loss: 0.1654 | accuracy: 0.9556

epoch: 76
train | loss: 0.1467 | accuracy: 0.9608
test | loss: 0.1678 | accuracy: 0.9564

epoch: 77
train | loss: 0.1413 | accuracy: 0.9614
test | loss: 0.1662 | accuracy: 0.9537

epoch: 78
train | loss: 0.1436 | accuracy: 0.9606
test | loss: 0.1562 | accuracy: 0.9571

epoch: 79
train | loss: 0.1431 | accuracy: 0.9614
test | loss: 0.1632 | accuracy: 0.9557

epoch: 80
train | loss: 0.1407 | accuracy: 0.9621
test | loss: 0.1513 | accuracy: 0.9588

epoch: 81
train | loss: 0.1397 | accuracy: 0.9621
test | loss: 0.1559 | accuracy: 0.9569

epoch: 82
train | loss: 0.1341 | accuracy: 0.9634
test | loss: 0.1490 | accuracy: 0.9587

epoch: 83
train | loss: 0.1336 | accuracy: 0.9640
test | loss: 0.1504 | accuracy: 0.9577

epoch: 84
train | loss: 0.1295 | accuracy: 0.9656
test | loss: 0.1528 | accuracy: 0.9581

epoch: 85
train | loss: 0.1290 | accuracy: 0.9651
test | loss: 0.1421 | accuracy: 0.9599

epoch: 86
train | loss: 0.1269 | accuracy: 0.9653
test | loss: 0.1448 | accuracy: 0.9599

epoch: 87
train | loss: 0.1248 | accuracy: 0.9653
test | loss: 0.1438 | accuracy: 0.9610

epoch: 88
train | loss: 0.1235 | accuracy: 0.9658
test | loss: 0.1430 | accuracy: 0.9604

epoch: 89
train | loss: 0.1205 | accuracy: 0.9670
test | loss: 0.1430 | accuracy: 0.9586

epoch: 90
train | loss: 0.1230 | accuracy: 0.9662
test | loss: 0.1398 | accuracy: 0.9598

epoch: 91
train | loss: 0.1214 | accuracy: 0.9664
test | loss: 0.1442 | accuracy: 0.9595

epoch: 92
train | loss: 0.1209 | accuracy: 0.9671
test | loss: 0.1336 | accuracy: 0.9625

epoch: 93
train | loss: 0.1154 | accuracy: 0.9677
test | loss: 0.1364 | accuracy: 0.9634

epoch: 94
train | loss: 0.1155 | accuracy: 0.9680
test | loss: 0.1438 | accuracy: 0.9595

epoch: 95
train | loss: 0.1146 | accuracy: 0.9678
test | loss: 0.1358 | accuracy: 0.9628

epoch: 96
train | loss: 0.1156 | accuracy: 0.9680
test | loss: 0.1384 | accuracy: 0.9633

epoch: 97
train | loss: 0.1117 | accuracy: 0.9691
test | loss: 0.1326 | accuracy: 0.9608

epoch: 98
train | loss: 0.1124 | accuracy: 0.9690
test | loss: 0.1278 | accuracy: 0.9656

epoch: 99
train | loss: 0.1071 | accuracy: 0.9708
test | loss: 0.1321 | accuracy: 0.9630

epoch: 100
train | loss: 0.1054 | accuracy: 0.9703
test | loss: 0.1274 | accuracy: 0.9648

epoch: 101
train | loss: 0.1053 | accuracy: 0.9707
test | loss: 0.1311 | accuracy: 0.9629

epoch: 102
train | loss: 0.1067 | accuracy: 0.9699
test | loss: 0.1341 | accuracy: 0.9621

epoch: 103
train | loss: 0.1075 | accuracy: 0.9696
test | loss: 0.1282 | accuracy: 0.9627

epoch: 104
train | loss: 0.1049 | accuracy: 0.9698
test | loss: 0.1291 | accuracy: 0.9627

epoch: 105
train | loss: 0.1043 | accuracy: 0.9703
test | loss: 0.1320 | accuracy: 0.9620

epoch: 106
train | loss: 0.1009 | accuracy: 0.9708
test | loss: 0.1257 | accuracy: 0.9670

epoch: 107
train | loss: 0.0988 | accuracy: 0.9723
test | loss: 0.1277 | accuracy: 0.9644

epoch: 108
train | loss: 0.1002 | accuracy: 0.9718
test | loss: 0.1246 | accuracy: 0.9652

epoch: 109
train | loss: 0.0997 | accuracy: 0.9723
test | loss: 0.1248 | accuracy: 0.9624

epoch: 110
train | loss: 0.1013 | accuracy: 0.9716
test | loss: 0.1240 | accuracy: 0.9649

epoch: 111
train | loss: 0.0985 | accuracy: 0.9725
test | loss: 0.1342 | accuracy: 0.9631

epoch: 112
train | loss: 0.0955 | accuracy: 0.9729
test | loss: 0.1265 | accuracy: 0.9636

epoch: 113
train | loss: 0.0963 | accuracy: 0.9728
test | loss: 0.1244 | accuracy: 0.9646

epoch: 114
train | loss: 0.0940 | accuracy: 0.9742
test | loss: 0.1299 | accuracy: 0.9627

epoch: 115
train | loss: 0.0959 | accuracy: 0.9724
test | loss: 0.1208 | accuracy: 0.9660

epoch: 116
train | loss: 0.0926 | accuracy: 0.9739
test | loss: 0.1285 | accuracy: 0.9628

epoch: 117
train | loss: 0.0916 | accuracy: 0.9742
test | loss: 0.1255 | accuracy: 0.9658

epoch: 118
train | loss: 0.0912 | accuracy: 0.9738
test | loss: 0.1197 | accuracy: 0.9662

epoch: 119
train | loss: 0.0921 | accuracy: 0.9739
test | loss: 0.1227 | accuracy: 0.9630

epoch: 120
train | loss: 0.0905 | accuracy: 0.9740
test | loss: 0.1205 | accuracy: 0.9661

epoch: 121
train | loss: 0.0887 | accuracy: 0.9755
test | loss: 0.1209 | accuracy: 0.9649

epoch: 122
train | loss: 0.0881 | accuracy: 0.9753
test | loss: 0.1143 | accuracy: 0.9674

epoch: 123
train | loss: 0.0884 | accuracy: 0.9746
test | loss: 0.1203 | accuracy: 0.9663

epoch: 124
train | loss: 0.0853 | accuracy: 0.9751
test | loss: 0.1143 | accuracy: 0.9684

epoch: 125
train | loss: 0.0847 | accuracy: 0.9759
test | loss: 0.1178 | accuracy: 0.9671

epoch: 126
train | loss: 0.0851 | accuracy: 0.9756
test | loss: 0.1184 | accuracy: 0.9666

epoch: 127
train | loss: 0.0857 | accuracy: 0.9757
test | loss: 0.1160 | accuracy: 0.9686

epoch: 128
train | loss: 0.0853 | accuracy: 0.9753
test | loss: 0.1190 | accuracy: 0.9667

epoch: 129
train | loss: 0.0823 | accuracy: 0.9761
test | loss: 0.1185 | accuracy: 0.9683

epoch: 130
train | loss: 0.0819 | accuracy: 0.9760
test | loss: 0.1168 | accuracy: 0.9669

epoch: 131
train | loss: 0.0830 | accuracy: 0.9767
test | loss: 0.1204 | accuracy: 0.9666

epoch: 132
train | loss: 0.0799 | accuracy: 0.9765
test | loss: 0.1112 | accuracy: 0.9707

epoch: 133
train | loss: 0.0768 | accuracy: 0.9780
test | loss: 0.1182 | accuracy: 0.9659

epoch: 134
train | loss: 0.0807 | accuracy: 0.9766
test | loss: 0.1185 | accuracy: 0.9672

epoch: 135
train | loss: 0.0782 | accuracy: 0.9774
test | loss: 0.1120 | accuracy: 0.9687

epoch: 136
train | loss: 0.0795 | accuracy: 0.9774
test | loss: 0.1128 | accuracy: 0.9682

epoch: 137
train | loss: 0.0748 | accuracy: 0.9787
test | loss: 0.1127 | accuracy: 0.9679

epoch: 138
train | loss: 0.0769 | accuracy: 0.9777
test | loss: 0.1117 | accuracy: 0.9697

epoch: 139
train | loss: 0.0721 | accuracy: 0.9795
test | loss: 0.1127 | accuracy: 0.9680

epoch: 140
train | loss: 0.0711 | accuracy: 0.9787
test | loss: 0.1191 | accuracy: 0.9677

epoch: 141
train | loss: 0.0730 | accuracy: 0.9791
test | loss: 0.1090 | accuracy: 0.9690

epoch: 142
train | loss: 0.0745 | accuracy: 0.9782
test | loss: 0.1120 | accuracy: 0.9696

epoch: 143
train | loss: 0.0744 | accuracy: 0.9779
test | loss: 0.1114 | accuracy: 0.9688

epoch: 144
train | loss: 0.0774 | accuracy: 0.9777
test | loss: 0.1142 | accuracy: 0.9685

epoch: 145
train | loss: 0.0783 | accuracy: 0.9775
test | loss: 0.1127 | accuracy: 0.9683

epoch: 146
train | loss: 0.0720 | accuracy: 0.9795
test | loss: 0.1158 | accuracy: 0.9691

epoch: 147
train | loss: 0.0728 | accuracy: 0.9790
test | loss: 0.1222 | accuracy: 0.9650

epoch: 148
train | loss: 0.0742 | accuracy: 0.9784
test | loss: 0.1104 | accuracy: 0.9673

epoch: 149
train | loss: 0.0704 | accuracy: 0.9800
test | loss: 0.1119 | accuracy: 0.9683

epoch: 150
train | loss: 0.0712 | accuracy: 0.9793
test | loss: 0.1101 | accuracy: 0.9692

epoch: 151
train | loss: 0.0727 | accuracy: 0.9784
test | loss: 0.1137 | accuracy: 0.9694

epoch: 152
train | loss: 0.0714 | accuracy: 0.9789
test | loss: 0.1054 | accuracy: 0.9692

epoch: 153
train | loss: 0.0707 | accuracy: 0.9797
test | loss: 0.1090 | accuracy: 0.9699

epoch: 154
train | loss: 0.0725 | accuracy: 0.9790
test | loss: 0.1098 | accuracy: 0.9704

epoch: 155
train | loss: 0.0695 | accuracy: 0.9798
test | loss: 0.1113 | accuracy: 0.9691

epoch: 156
train | loss: 0.0669 | accuracy: 0.9809
test | loss: 0.1079 | accuracy: 0.9704

epoch: 157
train | loss: 0.0688 | accuracy: 0.9801
test | loss: 0.1096 | accuracy: 0.9688

epoch: 158
train | loss: 0.0660 | accuracy: 0.9805
test | loss: 0.1089 | accuracy: 0.9698

epoch: 159
train | loss: 0.0662 | accuracy: 0.9806
test | loss: 0.1125 | accuracy: 0.9699

epoch: 160
train | loss: 0.0665 | accuracy: 0.9802
test | loss: 0.1079 | accuracy: 0.9694

epoch: 161
train | loss: 0.0654 | accuracy: 0.9807
test | loss: 0.1103 | accuracy: 0.9693

epoch: 162
train | loss: 0.0656 | accuracy: 0.9809
test | loss: 0.1123 | accuracy: 0.9691

epoch: 163
train | loss: 0.0666 | accuracy: 0.9797
test | loss: 0.1136 | accuracy: 0.9704

epoch: 164
train | loss: 0.0638 | accuracy: 0.9814
test | loss: 0.1010 | accuracy: 0.9717

epoch: 165
train | loss: 0.0623 | accuracy: 0.9816
test | loss: 0.1054 | accuracy: 0.9702

epoch: 166
train | loss: 0.0646 | accuracy: 0.9812
test | loss: 0.1094 | accuracy: 0.9701

epoch: 167
train | loss: 0.0623 | accuracy: 0.9816
test | loss: 0.1082 | accuracy: 0.9708

epoch: 168
train | loss: 0.0644 | accuracy: 0.9812
test | loss: 0.1095 | accuracy: 0.9713

epoch: 169
train | loss: 0.0622 | accuracy: 0.9820
test | loss: 0.1048 | accuracy: 0.9718

epoch: 170
train | loss: 0.0623 | accuracy: 0.9819
test | loss: 0.1090 | accuracy: 0.9698

epoch: 171
train | loss: 0.0607 | accuracy: 0.9819
test | loss: 0.1086 | accuracy: 0.9718

epoch: 172
train | loss: 0.0616 | accuracy: 0.9816
test | loss: 0.1078 | accuracy: 0.9701

epoch: 173
train | loss: 0.0614 | accuracy: 0.9822
test | loss: 0.1076 | accuracy: 0.9705

epoch: 174
train | loss: 0.0608 | accuracy: 0.9823
test | loss: 0.0958 | accuracy: 0.9735

epoch: 175
train | loss: 0.0572 | accuracy: 0.9827
test | loss: 0.1067 | accuracy: 0.9718

epoch: 176
train | loss: 0.0596 | accuracy: 0.9829
test | loss: 0.1033 | accuracy: 0.9723

epoch: 177
train | loss: 0.0592 | accuracy: 0.9827
test | loss: 0.0973 | accuracy: 0.9727

epoch: 178
train | loss: 0.0589 | accuracy: 0.9829
test | loss: 0.1033 | accuracy: 0.9717

epoch: 179
train | loss: 0.0595 | accuracy: 0.9826
test | loss: 0.1022 | accuracy: 0.9720

epoch: 180
train | loss: 0.0614 | accuracy: 0.9821
test | loss: 0.1036 | accuracy: 0.9688

epoch: 181
train | loss: 0.0562 | accuracy: 0.9830
test | loss: 0.0994 | accuracy: 0.9733

epoch: 182
train | loss: 0.0566 | accuracy: 0.9834
test | loss: 0.1040 | accuracy: 0.9722

epoch: 183
train | loss: 0.0579 | accuracy: 0.9826
test | loss: 0.1077 | accuracy: 0.9712

epoch: 184
train | loss: 0.0559 | accuracy: 0.9838
test | loss: 0.1010 | accuracy: 0.9734

epoch: 185
train | loss: 0.0548 | accuracy: 0.9836
test | loss: 0.1051 | accuracy: 0.9720

epoch: 186
train | loss: 0.0577 | accuracy: 0.9826
test | loss: 0.1068 | accuracy: 0.9699

epoch: 187
train | loss: 0.0584 | accuracy: 0.9828
test | loss: 0.0993 | accuracy: 0.9718

epoch: 188
train | loss: 0.0526 | accuracy: 0.9843
test | loss: 0.0939 | accuracy: 0.9731

epoch: 189
train | loss: 0.0550 | accuracy: 0.9838
test | loss: 0.0990 | accuracy: 0.9738

epoch: 190
train | loss: 0.0533 | accuracy: 0.9839
test | loss: 0.1056 | accuracy: 0.9711

epoch: 191
train | loss: 0.0541 | accuracy: 0.9840
test | loss: 0.1013 | accuracy: 0.9735

epoch: 192
train | loss: 0.0536 | accuracy: 0.9843
test | loss: 0.1018 | accuracy: 0.9721

epoch: 193
train | loss: 0.0569 | accuracy: 0.9829
test | loss: 0.1060 | accuracy: 0.9711

epoch: 194
train | loss: 0.0554 | accuracy: 0.9839
test | loss: 0.1037 | accuracy: 0.9719

epoch: 195
train | loss: 0.0552 | accuracy: 0.9837
test | loss: 0.1003 | accuracy: 0.9713

epoch: 196
train | loss: 0.0573 | accuracy: 0.9829
test | loss: 0.1031 | accuracy: 0.9710

epoch: 197
train | loss: 0.0549 | accuracy: 0.9832
test | loss: 0.1039 | accuracy: 0.9708

epoch: 198
train | loss: 0.0526 | accuracy: 0.9842
test | loss: 0.1030 | accuracy: 0.9704

epoch: 199
train | loss: 0.0534 | accuracy: 0.9843
test | loss: 0.1069 | accuracy: 0.9714

epoch: 200
train | loss: 0.0539 | accuracy: 0.9843
test | loss: 0.1045 | accuracy: 0.9704

epoch: 201
train | loss: 0.0546 | accuracy: 0.9834
test | loss: 0.1083 | accuracy: 0.9710

epoch: 202
train | loss: 0.0551 | accuracy: 0.9834
test | loss: 0.1104 | accuracy: 0.9708

epoch: 203
train | loss: 0.0536 | accuracy: 0.9832
test | loss: 0.1002 | accuracy: 0.9731

epoch: 204
train | loss: 0.0523 | accuracy: 0.9846
test | loss: 0.0973 | accuracy: 0.9748

epoch: 205
train | loss: 0.0536 | accuracy: 0.9841
test | loss: 0.0986 | accuracy: 0.9734

epoch: 206
train | loss: 0.0523 | accuracy: 0.9844
test | loss: 0.1053 | accuracy: 0.9711

epoch: 207
train | loss: 0.0524 | accuracy: 0.9847
test | loss: 0.1073 | accuracy: 0.9711

epoch: 208
train | loss: 0.0486 | accuracy: 0.9853
test | loss: 0.1025 | accuracy: 0.9724

epoch: 209
train | loss: 0.0502 | accuracy: 0.9851
test | loss: 0.1043 | accuracy: 0.9734

epoch: 210
train | loss: 0.0461 | accuracy: 0.9864
test | loss: 0.1011 | accuracy: 0.9716

epoch: 211
train | loss: 0.0509 | accuracy: 0.9847
test | loss: 0.0955 | accuracy: 0.9740

epoch: 212
train | loss: 0.0515 | accuracy: 0.9847
test | loss: 0.0973 | accuracy: 0.9719

epoch: 213
train | loss: 0.0504 | accuracy: 0.9849
test | loss: 0.1103 | accuracy: 0.9695

epoch: 214
train | loss: 0.0501 | accuracy: 0.9851
test | loss: 0.1018 | accuracy: 0.9725

epoch: 215
train | loss: 0.0502 | accuracy: 0.9849
test | loss: 0.1082 | accuracy: 0.9721

epoch: 216
train | loss: 0.0495 | accuracy: 0.9853
test | loss: 0.1066 | accuracy: 0.9720

epoch: 217
train | loss: 0.0481 | accuracy: 0.9857
test | loss: 0.0989 | accuracy: 0.9723

epoch: 218
train | loss: 0.0507 | accuracy: 0.9846
test | loss: 0.1101 | accuracy: 0.9704

epoch: 219
train | loss: 0.0486 | accuracy: 0.9856
test | loss: 0.1059 | accuracy: 0.9712

epoch: 220
train | loss: 0.0494 | accuracy: 0.9853
test | loss: 0.1050 | accuracy: 0.9718

epoch: 221
train | loss: 0.0476 | accuracy: 0.9859
test | loss: 0.0962 | accuracy: 0.9740

epoch: 222
train | loss: 0.0489 | accuracy: 0.9853
test | loss: 0.0992 | accuracy: 0.9730

epoch: 223
train | loss: 0.0510 | accuracy: 0.9849
test | loss: 0.0998 | accuracy: 0.9734

epoch: 224
train | loss: 0.0453 | accuracy: 0.9865
test | loss: 0.1005 | accuracy: 0.9745

epoch: 225
train | loss: 0.0479 | accuracy: 0.9853
test | loss: 0.0988 | accuracy: 0.9746

epoch: 226
train | loss: 0.0461 | accuracy: 0.9864
test | loss: 0.0989 | accuracy: 0.9748

epoch: 227
train | loss: 0.0474 | accuracy: 0.9856
test | loss: 0.1048 | accuracy: 0.9717

epoch: 228
train | loss: 0.0469 | accuracy: 0.9856
test | loss: 0.1015 | accuracy: 0.9720

epoch: 229
train | loss: 0.0441 | accuracy: 0.9865
test | loss: 0.0999 | accuracy: 0.9724

epoch: 230
train | loss: 0.0472 | accuracy: 0.9856
test | loss: 0.1006 | accuracy: 0.9740

epoch: 231
train | loss: 0.0466 | accuracy: 0.9859
test | loss: 0.0970 | accuracy: 0.9742

epoch: 232
train | loss: 0.0466 | accuracy: 0.9862
test | loss: 0.0985 | accuracy: 0.9730

epoch: 233
train | loss: 0.0470 | accuracy: 0.9861
test | loss: 0.0947 | accuracy: 0.9751

epoch: 234
train | loss: 0.0472 | accuracy: 0.9862
test | loss: 0.0967 | accuracy: 0.9754

epoch: 235
train | loss: 0.0442 | accuracy: 0.9867
test | loss: 0.0958 | accuracy: 0.9732

epoch: 236
train | loss: 0.0501 | accuracy: 0.9849
test | loss: 0.1004 | accuracy: 0.9734

epoch: 237
train | loss: 0.0444 | accuracy: 0.9862
test | loss: 0.0934 | accuracy: 0.9750

epoch: 238
train | loss: 0.0463 | accuracy: 0.9857
test | loss: 0.1010 | accuracy: 0.9745

epoch: 239
train | loss: 0.0461 | accuracy: 0.9862
test | loss: 0.1037 | accuracy: 0.9724

epoch: 240
train | loss: 0.0445 | accuracy: 0.9864
test | loss: 0.1056 | accuracy: 0.9734

epoch: 241
train | loss: 0.0476 | accuracy: 0.9855
test | loss: 0.1025 | accuracy: 0.9729

epoch: 242
train | loss: 0.0440 | accuracy: 0.9872
test | loss: 0.1048 | accuracy: 0.9724

epoch: 243
train | loss: 0.0450 | accuracy: 0.9863
test | loss: 0.0998 | accuracy: 0.9730

epoch: 244
train | loss: 0.0436 | accuracy: 0.9873
test | loss: 0.1017 | accuracy: 0.9743

epoch: 245
train | loss: 0.0435 | accuracy: 0.9871
test | loss: 0.0938 | accuracy: 0.9740

epoch: 246
train | loss: 0.0424 | accuracy: 0.9876
test | loss: 0.0947 | accuracy: 0.9743

epoch: 247
train | loss: 0.0443 | accuracy: 0.9867
test | loss: 0.0992 | accuracy: 0.9733

epoch: 248
train | loss: 0.0443 | accuracy: 0.9866
test | loss: 0.0969 | accuracy: 0.9732

epoch: 249
train | loss: 0.0408 | accuracy: 0.9879
test | loss: 0.1025 | accuracy: 0.9749

epoch: 250
train | loss: 0.0407 | accuracy: 0.9875
test | loss: 0.0983 | accuracy: 0.9760

epoch: 251
train | loss: 0.0423 | accuracy: 0.9873
test | loss: 0.0947 | accuracy: 0.9746

epoch: 252
train | loss: 0.0437 | accuracy: 0.9868
test | loss: 0.0905 | accuracy: 0.9751

epoch: 253
train | loss: 0.0452 | accuracy: 0.9865
test | loss: 0.1056 | accuracy: 0.9732

epoch: 254
train | loss: 0.0406 | accuracy: 0.9877
test | loss: 0.1011 | accuracy: 0.9729

epoch: 255
train | loss: 0.0419 | accuracy: 0.9875
test | loss: 0.0963 | accuracy: 0.9738

epoch: 256
train | loss: 0.0412 | accuracy: 0.9870
test | loss: 0.0979 | accuracy: 0.9744

epoch: 257
train | loss: 0.0402 | accuracy: 0.9876
test | loss: 0.1047 | accuracy: 0.9740

epoch: 258
train | loss: 0.0412 | accuracy: 0.9876
test | loss: 0.1009 | accuracy: 0.9745

epoch: 259
train | loss: 0.0409 | accuracy: 0.9877
test | loss: 0.0948 | accuracy: 0.9755

epoch: 260
train | loss: 0.0398 | accuracy: 0.9877
test | loss: 0.1012 | accuracy: 0.9745

epoch: 261
train | loss: 0.0409 | accuracy: 0.9873
test | loss: 0.1001 | accuracy: 0.9757

epoch: 262
train | loss: 0.0417 | accuracy: 0.9875
test | loss: 0.1019 | accuracy: 0.9728

epoch: 263
train | loss: 0.0409 | accuracy: 0.9875
test | loss: 0.1050 | accuracy: 0.9739

epoch: 264
train | loss: 0.0434 | accuracy: 0.9871
test | loss: 0.1073 | accuracy: 0.9691

epoch: 265
train | loss: 0.0445 | accuracy: 0.9867
test | loss: 0.1051 | accuracy: 0.9726

epoch: 266
train | loss: 0.0407 | accuracy: 0.9871
test | loss: 0.0988 | accuracy: 0.9737

epoch: 267
train | loss: 0.0424 | accuracy: 0.9872
test | loss: 0.0978 | accuracy: 0.9733

epoch: 268
train | loss: 0.0402 | accuracy: 0.9880
test | loss: 0.1065 | accuracy: 0.9723

epoch: 269
train | loss: 0.0412 | accuracy: 0.9870
test | loss: 0.0986 | accuracy: 0.9745

epoch: 270
train | loss: 0.0419 | accuracy: 0.9874
test | loss: 0.0961 | accuracy: 0.9744

epoch: 271
train | loss: 0.0422 | accuracy: 0.9872
test | loss: 0.1027 | accuracy: 0.9729

epoch: 272
train | loss: 0.0417 | accuracy: 0.9873
test | loss: 0.0977 | accuracy: 0.9746

epoch: 273
train | loss: 0.0415 | accuracy: 0.9874
test | loss: 0.1124 | accuracy: 0.9709

epoch: 274
train | loss: 0.0394 | accuracy: 0.9878
test | loss: 0.1040 | accuracy: 0.9735

epoch: 275
train | loss: 0.0396 | accuracy: 0.9879
test | loss: 0.0965 | accuracy: 0.9748

epoch: 276
train | loss: 0.0407 | accuracy: 0.9878
test | loss: 0.1003 | accuracy: 0.9756

epoch: 277
train | loss: 0.0397 | accuracy: 0.9879
test | loss: 0.1014 | accuracy: 0.9746

epoch: 278
train | loss: 0.0382 | accuracy: 0.9884
test | loss: 0.0944 | accuracy: 0.9748

epoch: 279
train | loss: 0.0397 | accuracy: 0.9877
test | loss: 0.0989 | accuracy: 0.9748

