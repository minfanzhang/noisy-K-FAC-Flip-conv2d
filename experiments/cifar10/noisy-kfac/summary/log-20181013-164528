/h/minfanzh/noisy-K-FAC_use_all_FC/main.py
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import tensorflow as tf
import numpy as np
import os

from misc.utils import get_logger, get_args, makedirs
from misc.config import process_config
from misc.data_loader import load_pytorch
from core.model import Model
from core.train import Trainer


_INPUT_DIM = {
    'fmnist': [784],
    'mnist': [784],
    'cifar10': [32, 32, 3],
    'cifar100': [32, 32, 3]
}


def main():
    tf.set_random_seed(1231)
    np.random.seed(1231)

    try:
        args = get_args()
        config = process_config(args.config)
    except:
        print("Add a config file using \'--config file_name.json\'")
        exit(1)

    makedirs(config.summary_dir)
    makedirs(config.checkpoint_dir)

    # set logger
    path = os.path.dirname(os.path.abspath(__file__))
    path1 = os.path.join(path, 'core/model.py')
    path2 = os.path.join(path, 'core/train.py')
    logger = get_logger('log', logpath=config.summary_dir+'/',
                        filepath=os.path.abspath(__file__), package_files=[path1, path2])

    logger.info(config)

    # load data
    train_loader, test_loader = load_pytorch(config)

    # define computational graph
    sess = tf.Session()

    model_ = Model(config, _INPUT_DIM[config.dataset], len(train_loader.dataset))
    trainer = Trainer(sess, model_, train_loader, test_loader, config, logger)

    trainer.train()


if __name__ == "__main__":
    main()

/h/minfanzh/noisy-K-FAC_use_all_FC/core/model.py
import tensorflow as tf

from ops import optimizer as opt
from ops import layer_collection as lc
from ops import sampler as sp
from network.registry import get_model
from core.base_model import BaseModel


class Model(BaseModel):
    def __init__(self, config, input_dim, n_data):
        super().__init__(config)
        self.layer_collection = lc.LayerCollection()
        self.input_dim = input_dim
        self.n_data = n_data

        self.cov_update_op = None
        self.inv_update_op = None

        self.build_model()
        self.init_optim()
        self.init_saver()

    @property
    def trainable_variables(self):
        # note: we don't train the params of BN
        vars = []
        for var in tf.trainable_variables():
            if "w" in var.name:
                vars.append(var)
        return vars

    def build_model(self):
        self.inputs = tf.placeholder(tf.float32, [None] + self.input_dim)
        self.targets = tf.placeholder(tf.int64, [None])
        self.is_training = tf.placeholder(tf.bool)
        self.n_particles = tf.placeholder(tf.int32)

        inputs = self.inputs
        net = get_model(self.config.model_name)

        self.sampler = sp.Sampler(self.config, self.n_data, self.n_particles)
        logits, l2_loss = net(inputs, self.sampler, self.is_training,
                              self.config.batch_norm, self.layer_collection,
                              self.n_particles)

        # ensemble
        logits_ = tf.reduce_mean(
            tf.reshape(logits, [self.n_particles, -1, tf.shape(logits)[-1]]), 0)
        self.acc = tf.reduce_mean(tf.cast(tf.equal(
            self.targets, tf.argmax(logits_, axis=1)), dtype=tf.float32))

        targets_ = tf.tile(self.targets, [self.n_particles])
        self.loss = tf.reduce_mean(
            tf.nn.sparse_softmax_cross_entropy_with_logits(
                labels=targets_, logits=logits))

        coeff = self.config.kl / (self.n_data * self.config.eta)
        self.total_loss = self.loss + coeff * l2_loss

    def init_optim(self):
        self.optim = opt.KFACOptimizer(var_list=self.trainable_variables,
                                       learning_rate=self.config.learning_rate,
                                       cov_ema_decay=self.config.cov_ema_decay,
                                       damping=self.config.damping,
                                       layer_collection=self.layer_collection,
                                       norm_constraint=tf.train.exponential_decay(self.config.kl_clip,
                                                                                  self.global_step_tensor,
                                                                                  390, 0.95, staircase=True),
                                       momentum=self.config.momentum)

        self.cov_update_op = self.optim.cov_update_op
        self.inv_update_op = self.optim.inv_update_op

        with tf.control_dependencies([self.inv_update_op]):
            self.var_update_op = self.sampler.update(self.layer_collection.get_blocks())

        update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS)
        with tf.control_dependencies(update_ops):
            self.train_op = self.optim.minimize(self.total_loss, global_step=self.global_step_tensor)

    def init_saver(self):
        self.saver = tf.train.Saver(max_to_keep=self.config.max_to_keep)


/h/minfanzh/noisy-K-FAC_use_all_FC/core/train.py
from core.base_train import BaseTrain
from tqdm import tqdm
import numpy as np


class Trainer(BaseTrain):
    def __init__(self, sess, model, train_loader, test_loader, config, logger):
        super(Trainer, self).__init__(sess, model, config, logger)
        self.train_loader = train_loader
        self.test_loader = test_loader

    def train(self):
        for cur_epoch in range(self.config.epoch):
            self.logger.info('epoch: {}'.format(int(cur_epoch)))
            self.train_epoch()
            self.test_epoch()

    def train_epoch(self):
        loss_list = []
        acc_list = []
        for itr, (x, y) in enumerate(tqdm(self.train_loader)):
            feed_dict = {
                self.model.inputs: x,
                self.model.targets: y,
                self.model.n_particles: self.config.train_particles
            }

            feed_dict.update({self.model.is_training: True})
            self.sess.run([self.model.train_op], feed_dict=feed_dict)

            feed_dict.update({self.model.is_training: False})  # note: that's important
            loss, acc = self.sess.run([self.model.loss, self.model.acc], feed_dict=feed_dict)
            loss_list.append(loss)
            acc_list.append(acc)

            cur_iter = self.model.global_step_tensor.eval(self.sess)
            if cur_iter % self.config.TCov == 0:
                self.sess.run([self.model.cov_update_op], feed_dict=feed_dict)

            if cur_iter % self.config.TInv == 0:
                self.sess.run([self.model.inv_update_op, self.model.var_update_op], feed_dict=feed_dict)

        avg_loss = np.mean(loss_list)
        avg_acc = np.mean(acc_list)
        self.logger.info("train | loss: %5.4f | accuracy: %5.4f"%(float(avg_loss), float(avg_acc)))

        # summarize
        summaries_dict = dict()
        summaries_dict['train_loss'] = avg_loss
        summaries_dict['train_acc'] = avg_acc

        # summarize
        cur_iter = self.model.global_step_tensor.eval(self.sess)
        self.summarizer.summarize(cur_iter, summaries_dict=summaries_dict)

        # self.model.save(self.sess)

    def test_epoch(self):
        loss_list = []
        acc_list = []
        for (x, y) in self.test_loader:
            feed_dict = {
                self.model.inputs: x,
                self.model.targets: y,
                self.model.is_training: False,
                self.model.n_particles: self.config.test_particles
            }
            loss, acc = self.sess.run([self.model.loss, self.model.acc], feed_dict=feed_dict)
            loss_list.append(loss)
            acc_list.append(acc)

        avg_loss = np.mean(loss_list)
        avg_acc = np.mean(acc_list)
        self.logger.info("test | loss: %5.4f | accuracy: %5.4f\n"%(float(avg_loss), float(avg_acc)))

        # summarize
        summaries_dict = dict()
        summaries_dict['test_loss'] = avg_loss
        summaries_dict['test_acc'] = avg_acc

        # summarize
        cur_iter = self.model.global_step_tensor.eval(self.sess)
        self.summarizer.summarize(cur_iter, summaries_dict=summaries_dict)

TCov: 10
TInv: 200
batch_norm: false
batch_size: 128
checkpoint_dir: ./experiments/cifar10/noisy-kfac/checkpoint/
cov_ema_decay: 0.99
damping: 0.001
data_aug: false
data_path: ../data
dataset: cifar10
epoch: 150
eta: 0.1
exp_name: noisy-kfac
fisher_approx: kron
kl: 0.5
kl_clip: 0.001
learning_rate: 0.0001
max_to_keep: 3
model_name: vgg16
momentum: 0.9
num_workers: 2
optimizer: kfac
summary_dir: ./experiments/cifar10/noisy-kfac/summary/
test_batch_size: 100
test_particles: 10
train_particles: 1

epoch: 0
train | loss: 2.3006 | accuracy: 0.1023
test | loss: 2.2996 | accuracy: 0.1053

epoch: 1
train | loss: 2.2982 | accuracy: 0.1188
test | loss: 2.2969 | accuracy: 0.1283

epoch: 2
train | loss: 2.2947 | accuracy: 0.1461
test | loss: 2.2919 | accuracy: 0.1753

epoch: 3
train | loss: 2.2869 | accuracy: 0.1824
test | loss: 2.2794 | accuracy: 0.2209

epoch: 4
train | loss: 2.2587 | accuracy: 0.2136
test | loss: 2.2172 | accuracy: 0.2301

epoch: 5
train | loss: 2.1297 | accuracy: 0.2270
test | loss: 2.0402 | accuracy: 0.2458

epoch: 6
train | loss: 1.9604 | accuracy: 0.2620
test | loss: 1.9010 | accuracy: 0.3103

epoch: 7
train | loss: 1.8676 | accuracy: 0.2909
test | loss: 1.8527 | accuracy: 0.3377

epoch: 8
train | loss: 1.8331 | accuracy: 0.3035
test | loss: 1.8482 | accuracy: 0.3536

epoch: 9
train | loss: 1.8095 | accuracy: 0.3141
test | loss: 1.8311 | accuracy: 0.3738

epoch: 10
train | loss: 1.7630 | accuracy: 0.3355
test | loss: 1.7948 | accuracy: 0.3980

epoch: 11
train | loss: 1.7009 | accuracy: 0.3647
test | loss: 1.7568 | accuracy: 0.4166

epoch: 12
train | loss: 1.6499 | accuracy: 0.3895
test | loss: 1.7349 | accuracy: 0.4249

epoch: 13
train | loss: 1.6115 | accuracy: 0.4033
test | loss: 1.7165 | accuracy: 0.4346

epoch: 14
train | loss: 1.5702 | accuracy: 0.4184
test | loss: 1.6980 | accuracy: 0.4441

epoch: 15
train | loss: 1.5326 | accuracy: 0.4317
test | loss: 1.6930 | accuracy: 0.4530

epoch: 16
train | loss: 1.4943 | accuracy: 0.4490
test | loss: 1.6861 | accuracy: 0.4574

epoch: 17
train | loss: 1.4656 | accuracy: 0.4582
test | loss: 1.6803 | accuracy: 0.4613

epoch: 18
train | loss: 1.4302 | accuracy: 0.4703
test | loss: 1.6768 | accuracy: 0.4649

epoch: 19
train | loss: 1.3954 | accuracy: 0.4820
test | loss: 1.6756 | accuracy: 0.4731

epoch: 20
train | loss: 1.3626 | accuracy: 0.4951
test | loss: 1.6731 | accuracy: 0.4701

epoch: 21
train | loss: 1.3332 | accuracy: 0.5090
test | loss: 1.6658 | accuracy: 0.4818

epoch: 22
train | loss: 1.3010 | accuracy: 0.5183
test | loss: 1.6759 | accuracy: 0.4825

epoch: 23
train | loss: 1.2706 | accuracy: 0.5310
test | loss: 1.6765 | accuracy: 0.4810

epoch: 24
train | loss: 1.2505 | accuracy: 0.5346
test | loss: 1.6850 | accuracy: 0.4918

epoch: 25
train | loss: 1.2213 | accuracy: 0.5461
test | loss: 1.6967 | accuracy: 0.4899

epoch: 26
train | loss: 1.1954 | accuracy: 0.5582
test | loss: 1.6913 | accuracy: 0.4914

epoch: 27
train | loss: 1.1708 | accuracy: 0.5666
test | loss: 1.7036 | accuracy: 0.4930

epoch: 28
train | loss: 1.1511 | accuracy: 0.5745
test | loss: 1.7168 | accuracy: 0.4944

epoch: 29
train | loss: 1.1220 | accuracy: 0.5865
test | loss: 1.7293 | accuracy: 0.4961

epoch: 30
train | loss: 1.0974 | accuracy: 0.5934
test | loss: 1.7264 | accuracy: 0.4920

epoch: 31
train | loss: 1.0774 | accuracy: 0.6003
test | loss: 1.7407 | accuracy: 0.4969

epoch: 32
train | loss: 1.0600 | accuracy: 0.6040
test | loss: 1.7585 | accuracy: 0.4982

epoch: 33
train | loss: 1.0359 | accuracy: 0.6156
test | loss: 1.7720 | accuracy: 0.4986

epoch: 34
